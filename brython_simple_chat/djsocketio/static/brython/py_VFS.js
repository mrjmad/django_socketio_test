__BRYTHON__.$py_VFS={
'/libs/datetime.js':'',
'/libs/hashlib.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7CiAgICAgICAgaWYgKGF0dHIgPT0gJ25ldycpIHtyZXR1cm4gJGhhc2hsaWJfbmV3O30KICAgICAgICByZXR1cm4gdGhpc1thdHRyXQogICAgfSwKICAgIG1kNTogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnbWQ1Jyl9LAogICAgc2hhMTogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnc2hhMScpfSwKICAgIHNoYTIyNDogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnc2hhMjI0Jyl9LAogICAgc2hhMjU2OiBmdW5jdGlvbigpIHtyZXR1cm4gJGhhc2hsaWJfbmV3KCdzaGEyNTYnKX0sCiAgICBzaGEzODQ6IGZ1bmN0aW9uKCkge3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTM4NCcpfSwKICAgIHNoYTUxMjogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnc2hhNTEyJyl9LAoKICAgIGFsZ29yaXRobXNfZ3VhcmFudGVlZDogWydtZDUnLCAnc2hhMScsICdzaGEyMjQnLCAnc2hhMjU2JywgJ3NoYTM4NCcsICdzaGE1MTInXSwKICAgIGFsZ29yaXRobXNfYXZhaWxhYmxlOiAgWydtZDUnLCAnc2hhMScsICdzaGEyMjQnLCAnc2hhMjU2JywgJ3NoYTM4NCcsICdzaGE1MTInXQp9CgoKLy90b2RvOiBldmVudHVhbGx5IG1vdmUgdGhpcyBmdW5jdGlvbiB0byBhICJ1dGlsaXR5IiBmaWxlIG9yIHVzZSBhamF4IG1vZHVsZT8KZnVuY3Rpb24gJGdldF9DcnlwdG9KU19saWIoYWxnKSB7CiAgIHZhciBpbXA9JGltcG9ydGVyKCkKICAgdmFyICR4bWxodHRwPWltcFswXSwgZmFrZV9xcz1pbXBbMV0sIHRpbWVyPWltcFsyXSwgcmVzPW51bGwKCiAgICR4bWxodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgaWYoJHhtbGh0dHAucmVhZHlTdGF0ZT09NCl7CiAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZXIpCiAgICAgICAgICAgIGlmKCR4bWxodHRwLnN0YXR1cz09MjAwIHx8ICR4bWxodHRwLnN0YXR1cz09MCl7cmVzPSR4bWxodHRwLnJlc3BvbnNlVGV4dH0KICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgIC8vIGRvbid0IHRocm93IGFuIGV4Y2VwdGlvbiBoZXJlLCBpdCB3aWxsIG5vdCBiZSBjYXVnaHQgKGlzc3VlICMzMCkKICAgICAgICAgICAgICAgIHJlcyA9IEVycm9yKCkKICAgICAgICAgICAgICAgIHJlcy5uYW1lID0gJ05vdEZvdW5kRXJyb3InCiAgICAgICAgICAgICAgICByZXMubWVzc2FnZSA9ICJObyBDcnlwdG9KUyBsaWIgbmFtZWQgJyIrYWxnKyInIgogICAgICAgICAgICB9CiAgICAgICAgfQogICB9CgogICAkeG1saHR0cC5vcGVuKCdHRVQnLCBfX0JSWVRIT05fXy5icnl0aG9uX3BhdGgrJ2xpYnMvY3J5cHRvX2pzL3JvbGx1cHMvJythbGcrJy5qcycrZmFrZV9xcyxmYWxzZSkKICAgaWYoJ292ZXJyaWRlTWltZVR5cGUnIGluICR4bWxodHRwKXskeG1saHR0cC5vdmVycmlkZU1pbWVUeXBlKCJ0ZXh0L3BsYWluIil9CiAgICR4bWxodHRwLnNlbmQoKQogICBpZihyZXMuY29uc3RydWN0b3I9PT1FcnJvcil7dGhyb3cgcmVzfSAvLyBtb2R1bGUgbm90IGZvdW5kCgogICB0cnl7CiAgICAgIGV2YWwocmVzICsgIjsgX19CUllUSE9OX18uQ3J5cHRvSlM9Q3J5cHRvSlM7IikKICAgfSBjYXRjaCAoZXJyKSB7IAogICAgICB0aHJvdyBFcnJvcigiSlMgRXZhbCBFcnJvciIsICJDYW5ub3QgZXZhbCBDcnlwdG9KUyBhbGdvcml0aG0gJyIgKyBhbGcgKyAiJyA6IGVycm9yOiIgKyBlcnIpOwogICB9Cn0KCmZ1bmN0aW9uICRoYXNobGliX25ldyhhbGcpIHsKICAgIGlmIChhbGcgPT0gJ21kNScpIHsKICAgICAgIGlmIChfX0JSWVRIT05fXy5DcnlwdG8gPT09IHVuZGVmaW5lZCB8fCAKICAgICAgICAgICBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLk1ENSA9PT0gdW5kZWZpbmVkKSAkZ2V0X0NyeXB0b0pTX2xpYignbWQ1JykKICAgICAgIHRoaXMuaGFzaCA9IF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uTUQ1LmNyZWF0ZSgpCiAgICB9IGVsc2UgaWYgKGFsZyA9PSAnc2hhMScpIHsKICAgICAgIGlmIChfX0JSWVRIT05fXy5DcnlwdG8gPT09IHVuZGVmaW5lZCB8fCAKICAgICAgICAgICBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTEgPT09IHVuZGVmaW5lZCkgJGdldF9DcnlwdG9KU19saWIoJ3NoYTEnKQogICAgICAgdGhpcy5oYXNoID0gX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEExLmNyZWF0ZSgpCiAgICB9IGVsc2UgaWYgKGFsZyA9PSAnc2hhMjI0JykgewogICAgICAgaWYgKF9fQlJZVEhPTl9fLkNyeXB0byA9PT0gdW5kZWZpbmVkIHx8IAogICAgICAgICAgIF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMjI0ID09PSB1bmRlZmluZWQpICRnZXRfQ3J5cHRvSlNfbGliKCdzaGEyMjQnKQogICAgICAgdGhpcy5oYXNoID0gX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEyMjQuY3JlYXRlKCkKICAgIH0gZWxzZSBpZiAoYWxnID09ICdzaGEyNTYnKSB7CiAgICAgICBpZiAoX19CUllUSE9OX18uQ3J5cHRvID09PSB1bmRlZmluZWQgfHwgCiAgICAgICAgICAgX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEyNTYgPT09IHVuZGVmaW5lZCkgJGdldF9DcnlwdG9KU19saWIoJ3NoYTI1NicpCiAgICAgICB0aGlzLmhhc2ggPSBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTI1Ni5jcmVhdGUoKQogICAgfSBlbHNlIGlmIChhbGcgPT0gJ3NoYTM4NCcpIHsKICAgICAgIGlmIChfX0JSWVRIT05fXy5DcnlwdG8gPT09IHVuZGVmaW5lZCB8fCAKICAgICAgICAgICBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTM4NCA9PT0gdW5kZWZpbmVkKSAkZ2V0X0NyeXB0b0pTX2xpYignc2hhMzg0JykKICAgICAgIHRoaXMuaGFzaCA9IF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMzg0LmNyZWF0ZSgpCiAgICB9IGVsc2UgaWYgKGFsZyA9PSAnc2hhNTEyJykgewogICAgICAgaWYgKF9fQlJZVEhPTl9fLkNyeXB0byA9PT0gdW5kZWZpbmVkIHx8IAogICAgICAgICAgIF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBNTEyID09PSB1bmRlZmluZWQpICRnZXRfQ3J5cHRvSlNfbGliKCdzaGE1MTInKQogICAgICAgdGhpcy5oYXNoID0gX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEE1MTIuY3JlYXRlKCkKICAgIH0gZWxzZSB7CiAgICAgICAkcmFpc2UoJ0F0dHJpYnV0ZUVycm9yJywgJ0ludmFsaWQgaGFzaCBhbGdvcml0aG06JyArIGFsZykKICAgIH0KIAogICAgdGhpcy5fX2NsYXNzX18gPSAkdHlwZQogICAgdGhpcy5fX2dldGF0dHJfXyA9IGZ1bmN0aW9uKGF0dHIpe3JldHVybiAkZ2V0YXR0cih0aGlzLGF0dHIpfQogICAgdGhpcy5fX3N0cl9fID0gZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oZXhkaWdlc3QoKX0KICAgIHRoaXMudXBkYXRlID0gZnVuY3Rpb24obXNnKXt0aGlzLmhhc2gudXBkYXRlKG1zZyl9CiAgICB0aGlzLmNvcHkgPSBmdW5jdGlvbigpe3JldHVybiB0aGlzLmhhc2guY2xvbmUoKX0KCiAgICB0aGlzLmhleGRpZ2VzdCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciB0ZW1wPXRoaXMuaGFzaC5jbG9uZSgpOwogICAgICAgIHRlbXA9dGVtcC5maW5hbGl6ZSgpOwogICAgICAgIHJldHVybiB0ZW1wLnRvU3RyaW5nKCk7CiAgICB9CgogICAgcmV0dXJuIHRoaXM7Cn0KCiRtb2R1bGUuX19jbGFzc19fID0gJG1vZHVsZQokbW9kdWxlLl9fc3RyX18gPSBmdW5jdGlvbigpIHtyZXR1cm4gIjxtb2R1bGUgJ2hhc2hsaWInPiJ9Cg==',
'/libs/html.js':'Ly8gY3JlYXRpb24gb2YgYW4gSFRNTCBlbGVtZW50CiRtb2R1bGUgPSAoZnVuY3Rpb24oKXsKZnVuY3Rpb24gJFRhZyh0YWdOYW1lLGFyZ3MpewogICAgLy8gY2wKICAgIHZhciAkaSA9IG51bGwKICAgIHZhciBlbHQgPSBudWxsCiAgICB2YXIgZWx0ID0gJERPTU5vZGUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKSkKICAgIGVsdC5wYXJlbnQgPSB0aGlzCiAgICBpZihhcmdzIT11bmRlZmluZWQgJiYgYXJncy5sZW5ndGg+MCl7CiAgICAgICAgJHN0YXJ0ID0gMAogICAgICAgICRmaXJzdCA9IGFyZ3NbMF0KICAgICAgICAvLyBpZiBmaXJzdCBhcmd1bWVudCBpcyBub3QgYSBrZXl3b3JkLCBpdCdzIHRoZSB0YWcgY29udGVudAogICAgICAgIGlmKCFpc2luc3RhbmNlKCRmaXJzdCwkS3cpKXsKICAgICAgICAgICAgJHN0YXJ0ID0gMQogICAgICAgICAgICBpZihpc2luc3RhbmNlKCRmaXJzdCxbc3RyLGludCxmbG9hdF0pKXsKICAgICAgICAgICAgICAgIHR4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCRmaXJzdC50b1N0cmluZygpKQogICAgICAgICAgICAgICAgZWx0LmFwcGVuZENoaWxkKHR4dCkKICAgICAgICAgICAgfSBlbHNlIGlmKGlzaW5zdGFuY2UoJGZpcnN0LCRUYWdTdW0pKXsKICAgICAgICAgICAgICAgIGZvcigkaT0wOyRpPCRmaXJzdC5jaGlsZHJlbi5sZW5ndGg7JGkrKyl7CiAgICAgICAgICAgICAgICAgICAgZWx0LmFwcGVuZENoaWxkKCRmaXJzdC5jaGlsZHJlblskaV0pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0cnl7ZWx0LmFwcGVuZENoaWxkKCRmaXJzdCl9CiAgICAgICAgICAgICAgICBjYXRjaChlcnIpe3Rocm93IFZhbHVlRXJyb3IoJ3dyb25nIGVsZW1lbnQgJyskZmlyc3QpfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIGF0dHJpYnV0ZXMKICAgICAgICBmb3IoJGk9JHN0YXJ0OyRpPGFyZ3MubGVuZ3RoOyRpKyspewogICAgICAgICAgICAvLyBrZXl3b3JkIGFyZ3VtZW50cwogICAgICAgICAgICAkYXJnID0gYXJnc1skaV0KICAgICAgICAgICAgaWYoaXNpbnN0YW5jZSgkYXJnLCRLdykpewogICAgICAgICAgICAgICAgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkuc3Vic3RyKDAsMik9PT0ib24iKXsgLy8gZXZlbnRzCiAgICAgICAgICAgICAgICAgICAgZXZhbCgnZWx0LicrJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkrJz1mdW5jdGlvbigpeycrJGFyZy52YWx1ZSsnfScpCiAgICAgICAgICAgICAgICB9ZWxzZSBpZigkYXJnLm5hbWUudG9Mb3dlckNhc2UoKT09InN0eWxlIil7CiAgICAgICAgICAgICAgICAgICAgZWx0LnNldF9zdHlsZSgkYXJnLnZhbHVlKQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZigkYXJnLnZhbHVlIT09ZmFsc2UpewogICAgICAgICAgICAgICAgICAgICAgICAvLyBvcHRpb24uc2VsZWN0ZWQ9ZmFsc2Ugc2V0cyBpdCB0byB0cnVlIDotKQogICAgICAgICAgICAgICAgICAgICAgICB0cnl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJnID0gJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsdC5zZXRBdHRyaWJ1dGUoYXJnLCRhcmcudmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihhcmc9PSJjbGFzcyIpeyAvLyBmb3IgSUUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHQuc2V0QXR0cmlidXRlKCJjbGFzc05hbWUiLCRhcmcudmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH1jYXRjaChlcnIpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVmFsdWVFcnJvcigiY2FuJ3Qgc2V0IGF0dHJpYnV0ZSAiKyRhcmcubmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBlbHQKfQoKLy8gdGhlIGNsYXNzZXMgdXNlZCBmb3IgdGFnIHN1bXMsICRUYWdTVW0gYW5kICRUYWdTdW1DbGFzcyAKLy8gYXJlIGRlZmluZWQgaW4gcHlfZG9tLmpzCgpmdW5jdGlvbiBBKCl7cmV0dXJuICRUYWcoJ0EnLGFyZ3VtZW50cyl9Cgp2YXIgJHNyYyA9IEErJycgLy8gc291cmNlIG9mIGZ1bmN0aW9uIEEKLy8gSFRNTDQgdGFncwokdGFncyA9IFsnQScsICdBQkJSJywgJ0FDUk9OWU0nLCAnQUREUkVTUycsICdBUFBMRVQnLAogICAgICAgICAgICAnQicsICdCRE8nLCAnQklHJywgJ0JMT0NLUVVPVEUnLCAnQlVUVE9OJywKICAgICAgICAgICAgJ0NBUFRJT04nLCAnQ0VOVEVSJywgJ0NJVEUnLCAnQ09ERScsCiAgICAgICAgICAgICdERUwnLCAnREZOJywgJ0RJUicsICdESVYnLCAnREwnLAogICAgICAgICAgICAnRU0nLCAnRklFTERTRVQnLCAnRk9OVCcsICdGT1JNJywgJ0ZSQU1FU0VUJywKICAgICAgICAgICAgJ0gxJywgJ0gyJywgJ0gzJywgJ0g0JywgJ0g1JywgJ0g2JywKICAgICAgICAgICAgJ0knLCAnSUZSQU1FJywgJ0lOUycsICdLQkQnLCAnTEFCRUwnLCAnTEVHRU5EJywKICAgICAgICAgICAgJ01BUCcsICdNRU5VJywgJ05PRlJBTUVTJywgJ05PU0NSSVBUJywgJ09CSkVDVCcsCiAgICAgICAgICAgICdPTCcsICdPUFRHUk9VUCcsICdQUkUnLCAnUScsICdTJywgJ1NBTVAnLAogICAgICAgICAgICAnU0NSSVBUJywgJ1NFTEVDVCcsICdTTUFMTCcsICdTUEFOJywgJ1NUUklLRScsCiAgICAgICAgICAgICdTVFJPTkcnLCAnU1RZTEUnLCAnU1VCJywgJ1NVUCcsICdUQUJMRScsCiAgICAgICAgICAgICdURVhUQVJFQScsICdUSVRMRScsICdUVCcsICdVJywgJ1VMJywKICAgICAgICAgICAgJ1ZBUicsICdCT0RZJywgJ0NPTEdST1VQJywgJ0REJywgJ0RUJywgJ0hFQUQnLAogICAgICAgICAgICAnSFRNTCcsICdMSScsICdQJywgJ1RCT0RZJywnT1BUSU9OJywgCiAgICAgICAgICAgICdURCcsICdURk9PVCcsICdUSCcsICdUSEVBRCcsICdUUicsCiAgICAgICAgICAgICdBUkVBJywgJ0JBU0UnLCAnQkFTRUZPTlQnLCAnQlInLCAnQ09MJywgJ0ZSQU1FJywKICAgICAgICAgICAgJ0hSJywgJ0lNRycsICdJTlBVVCcsICdJU0lOREVYJywgJ0xJTksnLAogICAgICAgICAgICAnTUVUQScsICdQQVJBTSddCgovLyBIVE1MNSB0YWdzCiR0YWdzID0gJHRhZ3MuY29uY2F0KFsnQVJUSUNMRScsJ0FTSURFJywnRklHVVJFJywnRk9PVEVSJywnSEVBREVSJywnTkFWJywKICAgICdTRUNUSU9OJywnQVVESU8nLCdWSURFTycsJ0NBTlZBUycsJ0NPTU1BTkQnLCdEQVRBTElTVCcsCiAgICAnREVUQUlMUycsJ09VVFBVVCcsJ1BST0dSRVNTJywnSEdST1VQJywnTUFSSycsJ01FVEVSJywnVElNRScsCiAgICAnUlAnLCdSVCcsJ1JVQlknXSkKCi8vIGNyZWF0ZSBjbGFzc2VzCnZhciBvYmogPSBuZXcgT2JqZWN0KCkKZm9yKCRpPTA7JGk8JHRhZ3MubGVuZ3RoOyRpKyspewogICAgJGNvZGUgPSAkc3JjLnJlcGxhY2UoL0EvZ20sJHRhZ3NbJGldKQogICAgZXZhbCgib2JqLiIrJHRhZ3NbJGldKyI9IiskY29kZSkKICAgIGV2YWwoIm9iai4iKyR0YWdzWyRpXSsnLm5hbWU9IicrJHRhZ3NbJGldKyciJykKfQpvYmouX19nZXRhdHRyX18gPSBmdW5jdGlvbihhdHRyKXtyZXR1cm4gdGhpc1thdHRyXX0KcmV0dXJuIG9iagp9KSgpCg==',
'/libs/json.js':'JG1vZHVsZSA9ICB7CgogICAgX19nZXRhdHRyX18gOiBmdW5jdGlvbihhdHRyKXtyZXR1cm4gdGhpc1thdHRyXX0sCgogICAgcGFyc2UgOiBmdW5jdGlvbihqc29uX29iail7CiAgICAgICAgdmFyIHJlcyA9IEpTT04ucGFyc2UoanNvbl9vYmopCiAgICAgICAgdmFyIF9jbGFzcyA9IHJlc1snY2xhc3MnXQogICAgICAgIGlmKF9jbGFzcz09PXVuZGVmaW5lZCl7cmV0dXJuICRKUzJQeShyZXMpfQogICAgICAgIGVsc2UgaWYoWydpbnQnLCdzdHInLCdsaXN0J10uaW5kZXhPZihfY2xhc3MpPi0xKXtyZXR1cm4gcmVzLm9ian0KICAgICAgICBlbHNlIGlmKF9jbGFzcz09PSdmbG9hdCcpe3JldHVybiByZXMub2JqLnZhbHVlfQogICAgICAgIGVsc2UgaWYoX2NsYXNzPT09J2RpY3QnKXsKICAgICAgICAgICAgdmFyIHJlczEgPSBkaWN0KCkKICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxyZXMub2JqLiRrZXlzLmxlbmd0aDtpKyspewogICAgICAgICAgICAgICAgcmVzMS5fX3NldGl0ZW1fXyhyZXMub2JqLiRrZXlzW2ldLHJlcy5vYmouJHZhbHVlc1tpXSkKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVzMQogICAgICAgIH1lbHNlIGlmKF9jbGFzcz09PSdzZXQnKXsKICAgICAgICAgICAgdmFyIHJlczEgPSBzZXQoKQogICAgICAgICAgICBmb3IodmFyIGk9MDtpPHJlcy5vYmouaXRlbXMubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICAgICByZXMxLmFkZChyZXMub2JqLml0ZW1zW2ldKQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByZXMxCiAgICAgICAgfWVsc2V7dGhyb3cgVmFsdWVFcnJvcigiY2FuJ3QgcGFyc2UgSlNPTiBvYmplY3QgIitqc29uX29iail9CiAgICB9LAoKICAgIHN0cmluZ2lmeSA6IGZ1bmN0aW9uKG9iail7CiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHsnY2xhc3MnOm9iai5fX2NsYXNzX18uX19uYW1lX18sJ29iaic6b2JqfSkKICAgIH0sCn0=',
'/libs/math.js':'',
'/libs/random.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl19LAogICAgcmFuZG9tOmZ1bmN0aW9uKCl7cmV0dXJuIGZsb2F0KE1hdGgucmFuZG9tKCkpfSwKICAgIHJhbmRpbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gaW50KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSooYi1hKSthKSl9Cn0KJG1vZHVsZS5fX2NsYXNzX18gPSAkbW9kdWxlIC8vIGRlZmluZWQgaW4gJHB5X3V0aWxzCiRtb2R1bGUuX19zdHJfXyA9IGZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdyYW5kb20nPiJ9Cg==',
'/libs/re.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7CiAgICAgICAgdmFyIHJlcyA9IHRoaXNbYXR0cl0KICAgICAgICBpZihyZXM9PT11bmRlZmluZWQpe3Rocm93IEF0dHJpYnV0ZUVycm9yKCJtb2R1bGUgcmUgaGFzIG5vIGF0dHJpYnV0ZSAnIithdHRyKyInIil9CiAgICAgICAgcmV0dXJuIHJlcwogICAgfSwKICAgIEkgOiAnaScsCiAgICBNIDogJ20nLAogICAgZmluZGFsbCA6IGZ1bmN0aW9uKHBhdHRlcm4sc3RyaW5nLGZsYWdzKXsKICAgICAgICB2YXIgJG5zPSRNYWtlQXJncygncmUuc2VhcmNoJyxhcmd1bWVudHMsWydwYXR0ZXJuJywnc3RyaW5nJ10se30sJ2FyZ3MnLCdrdycpCiAgICAgICAgdmFyIGFyZ3MgPSAkbnNbJ2FyZ3MnXQogICAgICAgIGlmKGFyZ3MubGVuZ3RoPjApe3ZhciBmbGFncz1hcmdzWzBdfQogICAgICAgIGVsc2V7dmFyIGZsYWdzID0gJG5zWydrdyddLmdldCgnZmxhZ3MnLCcnKX0KICAgICAgICBmbGFncyArPSAnZ20nCiAgICAgICAgdmFyIGpzcCA9IG5ldyBSZWdFeHAocGF0dGVybixmbGFncykKICAgICAgICB2YXIganNtYXRjaCA9IHN0cmluZy5tYXRjaChqc3ApCiAgICAgICAgaWYoanNtYXRjaD09PW51bGwpe3JldHVybiBbXX0KICAgICAgICByZXR1cm4ganNtYXRjaAogICAgfSwKICAgIHNlYXJjaCA6IGZ1bmN0aW9uKHBhdHRlcm4sc3RyaW5nKXsKICAgICAgICB2YXIgJG5zPSRNYWtlQXJncygncmUuc2VhcmNoJyxhcmd1bWVudHMsWydwYXR0ZXJuJywnc3RyaW5nJ10se30sJ2FyZ3MnLCdrdycpCiAgICAgICAgdmFyIGFyZ3MgPSAkbnNbJ2FyZ3MnXQogICAgICAgIGlmKGFyZ3MubGVuZ3RoPjApe3ZhciBmbGFncz1hcmdzWzBdfQogICAgICAgIGVsc2V7dmFyIGZsYWdzID0gJG5zWydrdyddLmdldCgnZmxhZ3MnLCcnKX0KICAgICAgICB2YXIganNwID0gbmV3IFJlZ0V4cChwYXR0ZXJuLGZsYWdzKQogICAgICAgIHZhciBqc21hdGNoID0gc3RyaW5nLm1hdGNoKGpzcCkKICAgICAgICBpZihqc21hdGNoPT09bnVsbCl7cmV0dXJuIE5vbmV9CiAgICAgICAgdmFyIG1vID0gbmV3IE9iamVjdCgpCiAgICAgICAgbW8uZ3JvdXAgPSBmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgcmVzID0gW10KICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICAgICBpZihqc21hdGNoW2FyZ3VtZW50c1tpXV09PT11bmRlZmluZWQpe3Jlcy5wdXNoKE5vbmUpfQogICAgICAgICAgICAgICAgZWxzZXtyZXMucHVzaChqc21hdGNoW2FyZ3VtZW50c1tpXV0pfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKGFyZ3VtZW50cy5sZW5ndGg9PT0xKXtyZXR1cm4gcmVzWzBdfQogICAgICAgICAgICByZXR1cm4gcmVzCiAgICAgICAgfSwKICAgICAgICBtby5ncm91cHMgPSBmdW5jdGlvbihfZGVmYXVsdCl7CiAgICAgICAgICAgIGlmKF9kZWZhdWx0PT09dW5kZWZpbmVkKXtfZGVmYXVsdD1Ob25lfQogICAgICAgICAgICB2YXIgcmVzID0gW10KICAgICAgICAgICAgZm9yKHZhciBpPTE7aTxqc21hdGNoLmxlbmd0aDtpKyspewogICAgICAgICAgICAgICAgaWYoanNtYXRjaFtpXT09PXVuZGVmaW5lZCl7cmVzLnB1c2goX2RlZmF1bHQpfQogICAgICAgICAgICAgICAgZWxzZXtyZXMucHVzaChqc21hdGNoW2ldKX0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVzCiAgICAgICAgfQogICAgICAgIG1vLnN0YXJ0ID0gZnVuY3Rpb24oKXtyZXR1cm4ganNtYXRjaC5pbmRleH0KICAgICAgICBtby5zdHJpbmcgPSBzdHJpbmcKICAgICAgICByZXR1cm4gSlNPYmplY3QobW8pCiAgICB9LAogICAgc3ViIDogZnVuY3Rpb24ocGF0dGVybixyZXBsLHN0cmluZyl7CiAgICAgICAgdmFyICRucz0kTWFrZUFyZ3MoJ3JlLnNlYXJjaCcsYXJndW1lbnRzLFsncGF0dGVybicsJ3JlcGwnLCdzdHJpbmcnXSx7fSwnYXJncycsJ2t3JykKICAgICAgICBmb3IoJHZhciBpbiAkbnMpe2V2YWwoInZhciAiKyR2YXIrIj0kbnNbJHZhcl0iKX0KICAgICAgICB2YXIgYXJncyA9ICRuc1snYXJncyddCiAgICAgICAgdmFyIGNvdW50ID0gJG5zWydrdyddLmdldCgnY291bnQnLDApCiAgICAgICAgdmFyIGZsYWdzID0gJG5zWydrdyddLmdldCgnZmxhZ3MnLCcnKQogICAgICAgIGlmKGFyZ3MubGVuZ3RoPjApe3ZhciBjb3VudD1hcmdzWzBdfQogICAgICAgIGlmKGFyZ3MubGVuZ3RoPjEpe3ZhciBmbGFncz1hcmdzWzFdfQogICAgICAgIGlmKHR5cGVvZiByZXBsPT09InN0cmluZyIpewogICAgICAgICAgICAvLyBiYWNrcmVmZXJlbmNlcyBhcmUgXDEsIFwyLi4uIGluIFB5dGhvbiBidXQgJDEsJDIuLi4gaW4gSmF2YXNjcmlwdAogICAgICAgICAgICByZXBsID0gcmVwbC5yZXBsYWNlKC9cXChcZCspL2csJyQkJDEnKQogICAgICAgIH0KICAgICAgICBpZihjb3VudD09MCl7ZmxhZ3MrPSdnJ30KICAgICAgICB2YXIganNwID0gbmV3IFJlZ0V4cChwYXR0ZXJuLGZsYWdzKQogICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShqc3AscmVwbCkKICAgIH0KfQoKJG1vZHVsZS5tYXRjaCA9IGZ1bmN0aW9uKCl7CiAgICAvLyBtYXRjaCBpcyBsaWtlIHNlYXJjaCBidXQgcGF0dGVybiBtdXN0IHN0YXJ0IHdpdGggXgogICAgcGF0dGVybiA9IGFyZ3VtZW50c1swXQogICAgaWYocGF0dGVybi5jaGFyQXQoMCkhPT0nXicpe3BhdHRlcm4gPSAnXicrcGF0dGVybn0KICAgIHZhciBhcmdzID0gW3BhdHRlcm5dCiAgICBmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXthcmdzLnB1c2goYXJndW1lbnRzW2ldKX0KICAgIHJldHVybiAkbW9kdWxlLnNlYXJjaC5hcHBseShudWxsLGFyZ3MpCn0KJG1vZHVsZS5fX2NsYXNzX18gPSAkbW9kdWxlIC8vIGRlZmluZWQgaW4gJHB5X3V0aWxzCiRtb2R1bGUuX19zdHJfXyA9IGZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdyZSc+In0K',
'/libs/svg.js':'JG1vZHVsZSA9IChmdW5jdGlvbigpewoKJHN2Z05TID0gImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgokeGxpbmtOUyA9ICJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIgoKZnVuY3Rpb24gJFNWR1RhZyh0YWdfbmFtZSxhcmdzKXsKICAgIC8vIHJlcHJlc2VudHMgYW4gU1ZHIHRhZwogICAgdmFyICRpID0gbnVsbAogICAgdmFyICRvYmogPSB0aGlzCiAgICBlbHQgPSAkRE9NTm9kZShkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJHN2Z05TLHRhZ19uYW1lKSkKICAgIGlmKGFyZ3MhPXVuZGVmaW5lZCAmJiBhcmdzLmxlbmd0aD4wKXsKICAgICAgICAkc3RhcnQgPSAwCiAgICAgICAgJGZpcnN0ID0gYXJnc1swXQogICAgICAgIC8vIGlmIGZpcnN0IGFyZ3VtZW50IGlzIG5vdCBhIGtleXdvcmQsIGl0J3MgdGhlIHRhZyBjb250ZW50CiAgICAgICAgaWYoIWlzaW5zdGFuY2UoJGZpcnN0LCRLdykpewogICAgICAgICAgICAkc3RhcnQgPSAxCiAgICAgICAgICAgIGlmKGlzaW5zdGFuY2UoJGZpcnN0LFtzdHIsaW50LGZsb2F0XSkpewogICAgICAgICAgICAgICAgdHh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3RyKCRmaXJzdCkpCiAgICAgICAgICAgICAgICBlbHQuYXBwZW5kQ2hpbGQodHh0KQogICAgICAgICAgICB9IGVsc2UgaWYoaXNpbnN0YW5jZSgkZmlyc3QsJEFic3RyYWN0VGFnKSl7CiAgICAgICAgICAgICAgICBmb3IoJGk9MDskaTwkZmlyc3QuY2hpbGRyZW4ubGVuZ3RoOyRpKyspewogICAgICAgICAgICAgICAgICAgIGVsdC5hcHBlbmRDaGlsZCgkZmlyc3QuY2hpbGRyZW5bJGldKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdHJ5e2VsdC5hcHBlbmRDaGlsZCgkZmlyc3QpfQogICAgICAgICAgICAgICAgY2F0Y2goZXJyKXskcmFpc2UoJ1ZhbHVlRXJyb3InLCd3cm9uZyBlbGVtZW50ICcrJGZpcnN0KX0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAvLyBhdHRyaWJ1dGVzCiAgICAgICAgZm9yKCRpPSRzdGFydDskaTxhcmdzLmxlbmd0aDskaSsrKXsKICAgICAgICAgICAgLy8ga2V5d29yZCBhcmd1bWVudHMKICAgICAgICAgICAgJGFyZyA9IGFyZ3NbJGldCiAgICAgICAgICAgIGlmKGlzaW5zdGFuY2UoJGFyZywkS3cpKXsKICAgICAgICAgICAgICAgIGlmKCRhcmcubmFtZS50b0xvd2VyQ2FzZSgpLnN1YnN0cigwLDIpPT0ib24iKXsgLy8gZXZlbnRzCiAgICAgICAgICAgICAgICAgICAgZXZhbCgnZWx0LicrJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkrJz1mdW5jdGlvbigpeycrJGFyZy52YWx1ZSsnfScpCiAgICAgICAgICAgICAgICB9ZWxzZSBpZigkYXJnLm5hbWUudG9Mb3dlckNhc2UoKT09InN0eWxlIil7CiAgICAgICAgICAgICAgICAgICAgZWx0LnNldF9zdHlsZSgkYXJnLnZhbHVlKQogICAgICAgICAgICAgICAgfWVsc2UgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZigiaHJlZiIpICE9PSAtMSl7IC8vIHhsaW5rOmhyZWYKICAgICAgICAgICAgICAgICAgICBlbHQuc2V0QXR0cmlidXRlTlMoICJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiwiaHJlZiIsJGFyZy52YWx1ZSkKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYoJGFyZy52YWx1ZSE9PWZhbHNlKXsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3B0aW9uLnNlbGVjdGVkPWZhbHNlIHNldHMgaXQgdG8gdHJ1ZSA6LSkKICAgICAgICAgICAgICAgICAgICAgICAgZWx0LnNldEF0dHJpYnV0ZU5TKG51bGwsJGFyZy5uYW1lLnJlcGxhY2UoJ18nLCctJyksJGFyZy52YWx1ZSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gZWx0Cn0KCi8vIFNWRwp2YXIgJHN2Z190YWdzID0gWydhJywKJ2FsdEdseXBoJywKJ2FsdEdseXBoRGVmJywKJ2FsdEdseXBoSXRlbScsCidhbmltYXRlJywKJ2FuaW1hdGVDb2xvcicsCidhbmltYXRlTW90aW9uJywKJ2FuaW1hdGVUcmFuc2Zvcm0nLAonY2lyY2xlJywKJ2NsaXBQYXRoJywKJ2NvbG9yX3Byb2ZpbGUnLCAvLyBpbnN0ZWFkIG9mIGNvbG9yLXByb2ZpbGUKJ2N1cnNvcicsCidkZWZzJywKJ2Rlc2MnLAonZWxsaXBzZScsCidmZUJsZW5kJywKJ2cnLAonaW1hZ2UnLAonbGluZScsCidsaW5lYXJHcmFkaWVudCcsCidtYXJrZXInLAonbWFzaycsCidwYXRoJywKJ3BhdHRlcm4nLAoncG9seWdvbicsCidwb2x5bGluZScsCidyYWRpYWxHcmFkaWVudCcsCidyZWN0JywKJ3N0b3AnLAonc3ZnJywKJ3RleHQnLAondHJlZicsCid0c3BhbicsCid1c2UnXQoKJHN2ZyA9IGZ1bmN0aW9uKCl7cmV0dXJuICRTVkdUYWcoJ1gnLGFyZ3VtZW50cyl9CiRzdmcgKz0gJycgLy8gc291cmNlIGNvZGUKCnZhciBvYmogPSBuZXcgT2JqZWN0KCkKZm9yKHZhciBpPTA7aTwkc3ZnX3RhZ3MubGVuZ3RoO2krKyl7CiAgICB2YXIgdGFnID0gJHN2Z190YWdzW2ldCiAgICBldmFsKCdvYmouJyt0YWcrJz0nKyRzdmcucmVwbGFjZSgnWCcsdGFnKSkKfQpvYmouX19nZXRhdHRyX18gPSBmdW5jdGlvbihhdHRyKXtyZXR1cm4gdGhpc1thdHRyXX0KcmV0dXJuIG9iagp9KSgp',
'/libs/time.js':'JG1vZHVsZSA9ICB7CgogICAgX19nZXRhdHRyX18gOiBmdW5jdGlvbihhdHRyKXtyZXR1cm4gdGhpc1thdHRyXX0sCgogICAgY2xlYXJfaW50ZXJ2YWwgOiBmdW5jdGlvbihpbnRfaWQpe3dpbmRvdy5jbGVhckludGVydmFsKGludF9pZCl9LAogICAgCiAgICBzZXRfaW50ZXJ2YWwgOiBmdW5jdGlvbihmdW5jLGludGVydmFsKXsKICAgICAgICByZXR1cm4gaW50KHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jLGludGVydmFsKSkKICAgIH0sCgogICAgc2V0X3RpbWVvdXQgOiBmdW5jdGlvbihmdW5jLGludGVydmFsKXt3aW5kb3cuc2V0VGltZW91dChmdW5jLGludGVydmFsKX0sCgogICAgbG9jYWx0aW1lIDogZnVuY3Rpb24oc2Vjcyl7IAogICAgICAgdmFyIGQ9bmV3IERhdGUoKTsKICAgICAgIGlmIChzZWNzID09PSB1bmRlZmluZWQgfHwgc2VjcyA9PT0gTm9uZSkge3JldHVybiBkLmdldFRpbWUoKX0KCiAgICAgICAvLyBjYWxjdWxhdGUgaWYgd2UgYXJlIGluIGRheWxpZ2h0IHNhdmluZ3MgdGltZSBvciBub3QuCiAgICAgICAvLyBib3Jyb3dlZCBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTE4ODc5MzQvY2hlY2staWYtZGF5bGlnaHQtc2F2aW5nLXRpbWUtaXMtaW4tZWZmZWN0LWFuZC1pZi1pdC1pcy1mb3ItaG93LW1hbnktaG91cnMKICAgICAgIHZhciBqYW4gPSBuZXcgRGF0ZShkLmdldEZ1bGxZZWFyKCksIDAsIDEpOwogICAgICAgdmFyIGp1bCA9IG5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSwgNiwgMSk7CiAgICAgICB2YXIgZHN0PWludChkLmdldFRpbWV6b25lT2Zmc2V0KCkgPCBNYXRoLm1heChqYW4uZ2V0VGltZXpvbmVPZmZzZXQoKSwganVsLmdldFRpbWV6b25lT2Zmc2V0KCkpKTsKCiAgICAgICByZXR1cm4gbGlzdChbZC5nZXRGdWxsWWVhcigpLCBkLmdldE1vbnRoKCkrMSwgZC5nZXREYXRlKCksIGQuZ2V0SG91cnMoKSwKICAgICAgICAgICAgICAgICAgICBkLmdldE1pbnV0ZXMoKSwgZC5nZXRTZWNvbmRzKCksIGQuZ2V0RGF5KCksIDAsIGRzdF0pCiAgICAgICAvL2ZpeG1lICAoc2Vjb25kIHRvIGxhc3QgdmFsdWUgaXMgMCB3aGljaCBpcyB0aGUgbnVtYmVyIG9mIGRheXMgaW4gdGhpcyB5ZWFyLi4pCiAgICB9LAogICAgdGltZSA6IGZ1bmN0aW9uKCl7cmV0dXJuIChuZXcgRGF0ZSgpKS5nZXRUaW1lKCl9LAogICAgCiAgICBzdHJmdGltZSA6IGZ1bmN0aW9uKGZvcm1hdCxhcmcpewoKICAgICAgICBmdW5jdGlvbiBucyhhcmcsbmIpewogICAgICAgICAgICAvLyBsZWZ0IHBhZGRpbmcgd2l0aCAwCiAgICAgICAgICAgIHZhciByZXMgPSBhcmcudG9TdHJpbmcoKQogICAgICAgICAgICB3aGlsZShyZXMubGVuZ3RoPG5iKXtyZXMgPSAnMCcrcmVzfQogICAgICAgICAgICByZXR1cm4gcmVzCiAgICAgICAgfQogICAgICAgIGlmKGFyZyl7dmFyIG9iaiA9IG5ldyBEYXRlKGFyZyl9ZWxzZXt2YXIgb2JqPW5ldyBEYXRlKCl9CiAgICAgICAgdmFyIHJlcyA9IGZvcm1hdAogICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKC8lSC8sbnMob2JqLmdldEhvdXJzKCksMikpCiAgICAgICAgcmVzID0gcmVzLnJlcGxhY2UoLyVNLyxucyhvYmouZ2V0TWludXRlcygpLDIpKQogICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKC8lUy8sbnMob2JqLmdldFNlY29uZHMoKSwyKSkKICAgICAgICByZXMgPSByZXMucmVwbGFjZSgvJVkvLG5zKG9iai5nZXRGdWxsWWVhcigpLDQpKQogICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKC8leS8sbnMob2JqLmdldEZ1bGxZZWFyKCksNCkuc3Vic3RyKDIpKQogICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKC8lbS8sbnMob2JqLmdldE1vbnRoKCkrMSwyKSkKICAgICAgICByZXMgPSByZXMucmVwbGFjZSgvJWQvLG5zKG9iai5nZXREYXRlKCksMikpCiAgICAgICAgcmV0dXJuIHJlcwogICAgfQp9Cg==',
'/libs/crypto_js/rollups/md5.js':'',
'/libs/crypto_js/rollups/sha1.js':'LyoKQ3J5cHRvSlMgdjMuMS4yCmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcwooYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQoqLwp2YXIgQ3J5cHRvSlM9Q3J5cHRvSlN8fGZ1bmN0aW9uKGUsbSl7dmFyIHA9e30saj1wLmxpYj17fSxsPWZ1bmN0aW9uKCl7fSxmPWouQmFzZT17ZXh0ZW5kOmZ1bmN0aW9uKGEpe2wucHJvdG90eXBlPXRoaXM7dmFyIGM9bmV3IGw7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pO2MuaW5pdC5wcm90b3R5cGU9YztjLiRzdXBlcj10aGlzO3JldHVybiBjfSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmV4dGVuZCgpO2EuaW5pdC5hcHBseShhLGFyZ3VtZW50cyk7cmV0dXJuIGF9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19LApuPWouV29yZEFycmF5PWYuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEsYyl7YT10aGlzLndvcmRzPWF8fFtdO3RoaXMuc2lnQnl0ZXM9YyE9bT9jOjQqYS5sZW5ndGh9LHRvU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybihhfHxoKS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLHE9YS53b3JkcyxkPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihkJTQpZm9yKHZhciBiPTA7YjxhO2IrKyljW2QrYj4+PjJdfD0ocVtiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NSk8PDI0LTgqKChkK2IpJTQpO2Vsc2UgaWYoNjU1MzU8cS5sZW5ndGgpZm9yKGI9MDtiPGE7Yis9NCljW2QrYj4+PjJdPXFbYj4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMscSk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLndvcmRzLGM9dGhpcy5zaWdCeXRlczthW2M+Pj4yXSY9NDI5NDk2NzI5NTw8CjMyLTgqKGMlNCk7YS5sZW5ndGg9ZS5jZWlsKGMvNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2Eud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKTtyZXR1cm4gYX0scmFuZG9tOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1bXSxiPTA7YjxhO2IrPTQpYy5wdXNoKDQyOTQ5NjcyOTYqZS5yYW5kb20oKXwwKTtyZXR1cm4gbmV3IG4uaW5pdChjLGEpfX0pLGI9cC5lbmM9e30saD1iLkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYj1bXSxkPTA7ZDxhO2QrKyl7dmFyIGY9Y1tkPj4+Ml0+Pj4yNC04KihkJTQpJjI1NTtiLnB1c2goKGY+Pj40KS50b1N0cmluZygxNikpO2IucHVzaCgoZiYxNSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gYi5qb2luKCIiKX0scGFyc2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPWEubGVuZ3RoLGI9W10sZD0wO2Q8YztkKz0yKWJbZD4+PjNdfD1wYXJzZUludChhLnN1YnN0cihkLAoyKSwxNik8PDI0LTQqKGQlOCk7cmV0dXJuIG5ldyBuLmluaXQoYixjLzIpfX0sZz1iLkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYj1bXSxkPTA7ZDxhO2QrKyliLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjW2Q+Pj4yXT4+PjI0LTgqKGQlNCkmMjU1KSk7cmV0dXJuIGIuam9pbigiIil9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxiPVtdLGQ9MDtkPGM7ZCsrKWJbZD4+PjJdfD0oYS5jaGFyQ29kZUF0KGQpJjI1NSk8PDI0LTgqKGQlNCk7cmV0dXJuIG5ldyBuLmluaXQoYixjKX19LHI9Yi5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGcuc3RyaW5naWZ5KGEpKSl9Y2F0Y2goYyl7dGhyb3cgRXJyb3IoIk1hbGZvcm1lZCBVVEYtOCBkYXRhIik7fX0scGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGcucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGEpKSl9fSwKaz1qLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09Zi5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgbi5pbml0O3RoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihhKXsic3RyaW5nIj09dHlwZW9mIGEmJihhPXIucGFyc2UoYSkpO3RoaXMuX2RhdGEuY29uY2F0KGEpO3RoaXMuX25EYXRhQnl0ZXMrPWEuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsYj1jLndvcmRzLGQ9Yy5zaWdCeXRlcyxmPXRoaXMuYmxvY2tTaXplLGg9ZC8oNCpmKSxoPWE/ZS5jZWlsKGgpOmUubWF4KChofDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1oKmY7ZD1lLm1pbig0KmEsZCk7aWYoYSl7Zm9yKHZhciBnPTA7ZzxhO2crPWYpdGhpcy5fZG9Qcm9jZXNzQmxvY2soYixnKTtnPWIuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09ZH1yZXR1cm4gbmV3IG4uaW5pdChnLGQpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTsKYS5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCk7cmV0dXJuIGF9LF9taW5CdWZmZXJTaXplOjB9KTtqLkhhc2hlcj1rLmV4dGVuZCh7Y2ZnOmYuZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYSk7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe2sucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihhKXt0aGlzLl9hcHBlbmQoYSk7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihhKXthJiZ0aGlzLl9hcHBlbmQoYSk7cmV0dXJuIHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsYil7cmV0dXJuKG5ldyBhLmluaXQoYikpLmZpbmFsaXplKGMpfX0sX2NyZWF0ZUhtYWNIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsZil7cmV0dXJuKG5ldyBzLkhNQUMuaW5pdChhLApmKSkuZmluYWxpemUoYil9fX0pO3ZhciBzPXAuYWxnbz17fTtyZXR1cm4gcH0oTWF0aCk7CihmdW5jdGlvbigpe3ZhciBlPUNyeXB0b0pTLG09ZS5saWIscD1tLldvcmRBcnJheSxqPW0uSGFzaGVyLGw9W10sbT1lLmFsZ28uU0hBMT1qLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBwLmluaXQoWzE3MzI1ODQxOTMsNDAyMzIzMzQxNywyNTYyMzgzMTAyLDI3MTczMzg3OCwzMjg1Mzc3NTIwXSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihmLG4pe2Zvcih2YXIgYj10aGlzLl9oYXNoLndvcmRzLGg9YlswXSxnPWJbMV0sZT1iWzJdLGs9YlszXSxqPWJbNF0sYT0wOzgwPmE7YSsrKXtpZigxNj5hKWxbYV09ZltuK2FdfDA7ZWxzZXt2YXIgYz1sW2EtM11ebFthLThdXmxbYS0xNF1ebFthLTE2XTtsW2FdPWM8PDF8Yz4+PjMxfWM9KGg8PDV8aD4+PjI3KStqK2xbYV07Yz0yMD5hP2MrKChnJmV8fmcmaykrMTUxODUwMDI0OSk6NDA+YT9jKygoZ15lXmspKzE4NTk3NzUzOTMpOjYwPmE/YysoKGcmZXxnJmt8ZSZrKS0xODk0MDA3NTg4KTpjKygoZ15lXgprKS04OTk0OTc1MTQpO2o9aztrPWU7ZT1nPDwzMHxnPj4+MjtnPWg7aD1jfWJbMF09YlswXStofDA7YlsxXT1iWzFdK2d8MDtiWzJdPWJbMl0rZXwwO2JbM109YlszXStrfDA7Yls0XT1iWzRdK2p8MH0sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgZj10aGlzLl9kYXRhLGU9Zi53b3JkcyxiPTgqdGhpcy5fbkRhdGFCeXRlcyxoPTgqZi5zaWdCeXRlcztlW2g+Pj41XXw9MTI4PDwyNC1oJTMyO2VbKGgrNjQ+Pj45PDw0KSsxNF09TWF0aC5mbG9vcihiLzQyOTQ5NjcyOTYpO2VbKGgrNjQ+Pj45PDw0KSsxNV09YjtmLnNpZ0J5dGVzPTQqZS5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNofSxjbG9uZTpmdW5jdGlvbigpe3ZhciBlPWouY2xvbmUuY2FsbCh0aGlzKTtlLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKTtyZXR1cm4gZX19KTtlLlNIQTE9ai5fY3JlYXRlSGVscGVyKG0pO2UuSG1hY1NIQTE9ai5fY3JlYXRlSG1hY0hlbHBlcihtKX0pKCk7Cg==',
'/libs/crypto_js/rollups/sha224.js':'LyoKQ3J5cHRvSlMgdjMuMS4yCmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcwooYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQoqLwp2YXIgQ3J5cHRvSlM9Q3J5cHRvSlN8fGZ1bmN0aW9uKGcsbCl7dmFyIGY9e30saz1mLmxpYj17fSxoPWZ1bmN0aW9uKCl7fSxtPWsuQmFzZT17ZXh0ZW5kOmZ1bmN0aW9uKGEpe2gucHJvdG90eXBlPXRoaXM7dmFyIGM9bmV3IGg7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pO2MuaW5pdC5wcm90b3R5cGU9YztjLiRzdXBlcj10aGlzO3JldHVybiBjfSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmV4dGVuZCgpO2EuaW5pdC5hcHBseShhLGFyZ3VtZW50cyk7cmV0dXJuIGF9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19LApxPWsuV29yZEFycmF5PW0uZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEsYyl7YT10aGlzLndvcmRzPWF8fFtdO3RoaXMuc2lnQnl0ZXM9YyE9bD9jOjQqYS5sZW5ndGh9LHRvU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybihhfHxzKS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLGQ9YS53b3JkcyxiPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihiJTQpZm9yKHZhciBlPTA7ZTxhO2UrKyljW2IrZT4+PjJdfD0oZFtlPj4+Ml0+Pj4yNC04KihlJTQpJjI1NSk8PDI0LTgqKChiK2UpJTQpO2Vsc2UgaWYoNjU1MzU8ZC5sZW5ndGgpZm9yKGU9MDtlPGE7ZSs9NCljW2IrZT4+PjJdPWRbZT4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMsZCk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLndvcmRzLGM9dGhpcy5zaWdCeXRlczthW2M+Pj4yXSY9NDI5NDk2NzI5NTw8CjMyLTgqKGMlNCk7YS5sZW5ndGg9Zy5jZWlsKGMvNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9bS5jbG9uZS5jYWxsKHRoaXMpO2Eud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKTtyZXR1cm4gYX0scmFuZG9tOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1bXSxkPTA7ZDxhO2QrPTQpYy5wdXNoKDQyOTQ5NjcyOTYqZy5yYW5kb20oKXwwKTtyZXR1cm4gbmV3IHEuaW5pdChjLGEpfX0pLHQ9Zi5lbmM9e30scz10LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgZD1bXSxiPTA7YjxhO2IrKyl7dmFyIGU9Y1tiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NTtkLnB1c2goKGU+Pj40KS50b1N0cmluZygxNikpO2QucHVzaCgoZSYxNSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gZC5qb2luKCIiKX0scGFyc2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPWEubGVuZ3RoLGQ9W10sYj0wO2I8YztiKz0yKWRbYj4+PjNdfD1wYXJzZUludChhLnN1YnN0cihiLAoyKSwxNik8PDI0LTQqKGIlOCk7cmV0dXJuIG5ldyBxLmluaXQoZCxjLzIpfX0sbj10LkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgZD1bXSxiPTA7YjxhO2IrKylkLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjW2I+Pj4yXT4+PjI0LTgqKGIlNCkmMjU1KSk7cmV0dXJuIGQuam9pbigiIil9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPVtdLGI9MDtiPGM7YisrKWRbYj4+PjJdfD0oYS5jaGFyQ29kZUF0KGIpJjI1NSk8PDI0LTgqKGIlNCk7cmV0dXJuIG5ldyBxLmluaXQoZCxjKX19LGo9dC5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKG4uc3RyaW5naWZ5KGEpKSl9Y2F0Y2goYyl7dGhyb3cgRXJyb3IoIk1hbGZvcm1lZCBVVEYtOCBkYXRhIik7fX0scGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIG4ucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGEpKSl9fSwKdz1rLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09bS5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgcS5pbml0O3RoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihhKXsic3RyaW5nIj09dHlwZW9mIGEmJihhPWoucGFyc2UoYSkpO3RoaXMuX2RhdGEuY29uY2F0KGEpO3RoaXMuX25EYXRhQnl0ZXMrPWEuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsZD1jLndvcmRzLGI9Yy5zaWdCeXRlcyxlPXRoaXMuYmxvY2tTaXplLGY9Yi8oNCplKSxmPWE/Zy5jZWlsKGYpOmcubWF4KChmfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1mKmU7Yj1nLm1pbig0KmEsYik7aWYoYSl7Zm9yKHZhciB1PTA7dTxhO3UrPWUpdGhpcy5fZG9Qcm9jZXNzQmxvY2soZCx1KTt1PWQuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09Yn1yZXR1cm4gbmV3IHEuaW5pdCh1LGIpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPW0uY2xvbmUuY2FsbCh0aGlzKTsKYS5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCk7cmV0dXJuIGF9LF9taW5CdWZmZXJTaXplOjB9KTtrLkhhc2hlcj13LmV4dGVuZCh7Y2ZnOm0uZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYSk7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe3cucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihhKXt0aGlzLl9hcHBlbmQoYSk7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihhKXthJiZ0aGlzLl9hcHBlbmQoYSk7cmV0dXJuIHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7cmV0dXJuKG5ldyBhLmluaXQoZCkpLmZpbmFsaXplKGMpfX0sX2NyZWF0ZUhtYWNIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7cmV0dXJuKG5ldyB2LkhNQUMuaW5pdChhLApkKSkuZmluYWxpemUoYyl9fX0pO3ZhciB2PWYuYWxnbz17fTtyZXR1cm4gZn0oTWF0aCk7CihmdW5jdGlvbihnKXtmb3IodmFyIGw9Q3J5cHRvSlMsZj1sLmxpYixrPWYuV29yZEFycmF5LGg9Zi5IYXNoZXIsZj1sLmFsZ28sbT1bXSxxPVtdLHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIDQyOTQ5NjcyOTYqKGEtKGF8MCkpfDB9LHM9MixuPTA7NjQ+bjspe3ZhciBqO2E6e2o9cztmb3IodmFyIHc9Zy5zcXJ0KGopLHY9Mjt2PD13O3YrKylpZighKGoldikpe2o9ITE7YnJlYWsgYX1qPSEwfWomJig4Pm4mJihtW25dPXQoZy5wb3cocywwLjUpKSkscVtuXT10KGcucG93KHMsMS8zKSksbisrKTtzKyt9dmFyIGE9W10sZj1mLlNIQTI1Nj1oLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBrLmluaXQobS5zbGljZSgwKSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihjLGQpe2Zvcih2YXIgYj10aGlzLl9oYXNoLndvcmRzLGU9YlswXSxmPWJbMV0sZz1iWzJdLGs9YlszXSxoPWJbNF0sbD1iWzVdLG09Yls2XSxuPWJbN10scD0wOzY0PnA7cCsrKXtpZigxNj5wKWFbcF09CmNbZCtwXXwwO2Vsc2V7dmFyIGo9YVtwLTE1XSxyPWFbcC0yXTthW3BdPSgoajw8MjV8aj4+PjcpXihqPDwxNHxqPj4+MTgpXmo+Pj4zKSthW3AtN10rKChyPDwxNXxyPj4+MTcpXihyPDwxM3xyPj4+MTkpXnI+Pj4xMCkrYVtwLTE2XX1qPW4rKChoPDwyNnxoPj4+NileKGg8PDIxfGg+Pj4xMSleKGg8PDd8aD4+PjI1KSkrKGgmbF5+aCZtKStxW3BdK2FbcF07cj0oKGU8PDMwfGU+Pj4yKV4oZTw8MTl8ZT4+PjEzKV4oZTw8MTB8ZT4+PjIyKSkrKGUmZl5lJmdeZiZnKTtuPW07bT1sO2w9aDtoPWsranwwO2s9ZztnPWY7Zj1lO2U9aityfDB9YlswXT1iWzBdK2V8MDtiWzFdPWJbMV0rZnwwO2JbMl09YlsyXStnfDA7YlszXT1iWzNdK2t8MDtiWzRdPWJbNF0raHwwO2JbNV09Yls1XStsfDA7Yls2XT1iWzZdK218MDtiWzddPWJbN10rbnwwfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuX2RhdGEsZD1hLndvcmRzLGI9OCp0aGlzLl9uRGF0YUJ5dGVzLGU9OCphLnNpZ0J5dGVzOwpkW2U+Pj41XXw9MTI4PDwyNC1lJTMyO2RbKGUrNjQ+Pj45PDw0KSsxNF09Zy5mbG9vcihiLzQyOTQ5NjcyOTYpO2RbKGUrNjQ+Pj45PDw0KSsxNV09YjthLnNpZ0J5dGVzPTQqZC5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNofSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWguY2xvbmUuY2FsbCh0aGlzKTthLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKTtyZXR1cm4gYX19KTtsLlNIQTI1Nj1oLl9jcmVhdGVIZWxwZXIoZik7bC5IbWFjU0hBMjU2PWguX2NyZWF0ZUhtYWNIZWxwZXIoZil9KShNYXRoKTsKKGZ1bmN0aW9uKCl7dmFyIGc9Q3J5cHRvSlMsbD1nLmxpYi5Xb3JkQXJyYXksZj1nLmFsZ28saz1mLlNIQTI1NixmPWYuU0hBMjI0PWsuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IGwuaW5pdChbMzIzODM3MTAzMiw5MTQxNTA2NjMsODEyNzAyOTk5LDQxNDQ5MTI2OTcsNDI5MDc3NTg1NywxNzUwNjAzMDI1LDE2OTQwNzY4MzksMzIwNDA3NTQyOF0pfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBmPWsuX2RvRmluYWxpemUuY2FsbCh0aGlzKTtmLnNpZ0J5dGVzLT00O3JldHVybiBmfX0pO2cuU0hBMjI0PWsuX2NyZWF0ZUhlbHBlcihmKTtnLkhtYWNTSEEyMjQ9ay5fY3JlYXRlSG1hY0hlbHBlcihmKX0pKCk7Cg==',
'/libs/crypto_js/rollups/sha3.js':'LyoKQ3J5cHRvSlMgdjMuMS4yCmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcwooYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQoqLwp2YXIgQ3J5cHRvSlM9Q3J5cHRvSlN8fGZ1bmN0aW9uKHYscCl7dmFyIGQ9e30sdT1kLmxpYj17fSxyPWZ1bmN0aW9uKCl7fSxmPXUuQmFzZT17ZXh0ZW5kOmZ1bmN0aW9uKGEpe3IucHJvdG90eXBlPXRoaXM7dmFyIGI9bmV3IHI7YSYmYi5taXhJbihhKTtiLmhhc093blByb3BlcnR5KCJpbml0Iil8fChiLmluaXQ9ZnVuY3Rpb24oKXtiLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pO2IuaW5pdC5wcm90b3R5cGU9YjtiLiRzdXBlcj10aGlzO3JldHVybiBifSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmV4dGVuZCgpO2EuaW5pdC5hcHBseShhLGFyZ3VtZW50cyk7cmV0dXJuIGF9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYiBpbiBhKWEuaGFzT3duUHJvcGVydHkoYikmJih0aGlzW2JdPWFbYl0pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19LApzPXUuV29yZEFycmF5PWYuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEsYil7YT10aGlzLndvcmRzPWF8fFtdO3RoaXMuc2lnQnl0ZXM9YiE9cD9iOjQqYS5sZW5ndGh9LHRvU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybihhfHx5KS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLndvcmRzLGM9YS53b3JkcyxqPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihqJTQpZm9yKHZhciBuPTA7bjxhO24rKyliW2orbj4+PjJdfD0oY1tuPj4+Ml0+Pj4yNC04KihuJTQpJjI1NSk8PDI0LTgqKChqK24pJTQpO2Vsc2UgaWYoNjU1MzU8Yy5sZW5ndGgpZm9yKG49MDtuPGE7bis9NCliW2orbj4+PjJdPWNbbj4+PjJdO2Vsc2UgYi5wdXNoLmFwcGx5KGIsYyk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLndvcmRzLGI9dGhpcy5zaWdCeXRlczthW2I+Pj4yXSY9NDI5NDk2NzI5NTw8CjMyLTgqKGIlNCk7YS5sZW5ndGg9di5jZWlsKGIvNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2Eud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKTtyZXR1cm4gYX0scmFuZG9tOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1bXSxjPTA7YzxhO2MrPTQpYi5wdXNoKDQyOTQ5NjcyOTYqdi5yYW5kb20oKXwwKTtyZXR1cm4gbmV3IHMuaW5pdChiLGEpfX0pLHg9ZC5lbmM9e30seT14LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBiPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYz1bXSxqPTA7ajxhO2orKyl7dmFyIG49YltqPj4+Ml0+Pj4yNC04KihqJTQpJjI1NTtjLnB1c2goKG4+Pj40KS50b1N0cmluZygxNikpO2MucHVzaCgobiYxNSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gYy5qb2luKCIiKX0scGFyc2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPWEubGVuZ3RoLGM9W10saj0wO2o8YjtqKz0yKWNbaj4+PjNdfD1wYXJzZUludChhLnN1YnN0cihqLAoyKSwxNik8PDI0LTQqKGolOCk7cmV0dXJuIG5ldyBzLmluaXQoYyxiLzIpfX0sZT14LkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBiPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYz1bXSxqPTA7ajxhO2orKyljLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShiW2o+Pj4yXT4+PjI0LTgqKGolNCkmMjU1KSk7cmV0dXJuIGMuam9pbigiIil9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hLmxlbmd0aCxjPVtdLGo9MDtqPGI7aisrKWNbaj4+PjJdfD0oYS5jaGFyQ29kZUF0KGopJjI1NSk8PDI0LTgqKGolNCk7cmV0dXJuIG5ldyBzLmluaXQoYyxiKX19LHE9eC5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGUuc3RyaW5naWZ5KGEpKSl9Y2F0Y2goYil7dGhyb3cgRXJyb3IoIk1hbGZvcm1lZCBVVEYtOCBkYXRhIik7fX0scGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGUucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGEpKSl9fSwKdD11LkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09Zi5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgcy5pbml0O3RoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihhKXsic3RyaW5nIj09dHlwZW9mIGEmJihhPXEucGFyc2UoYSkpO3RoaXMuX2RhdGEuY29uY2F0KGEpO3RoaXMuX25EYXRhQnl0ZXMrPWEuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2RhdGEsYz1iLndvcmRzLGo9Yi5zaWdCeXRlcyxuPXRoaXMuYmxvY2tTaXplLGU9ai8oNCpuKSxlPWE/di5jZWlsKGUpOnYubWF4KChlfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1lKm47aj12Lm1pbig0KmEsaik7aWYoYSl7Zm9yKHZhciBmPTA7ZjxhO2YrPW4pdGhpcy5fZG9Qcm9jZXNzQmxvY2soYyxmKTtmPWMuc3BsaWNlKDAsYSk7Yi5zaWdCeXRlcy09an1yZXR1cm4gbmV3IHMuaW5pdChmLGopfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTsKYS5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCk7cmV0dXJuIGF9LF9taW5CdWZmZXJTaXplOjB9KTt1Lkhhc2hlcj10LmV4dGVuZCh7Y2ZnOmYuZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYSk7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe3QucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihhKXt0aGlzLl9hcHBlbmQoYSk7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihhKXthJiZ0aGlzLl9hcHBlbmQoYSk7cmV0dXJuIHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7cmV0dXJuKG5ldyBhLmluaXQoYykpLmZpbmFsaXplKGIpfX0sX2NyZWF0ZUhtYWNIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7cmV0dXJuKG5ldyB3LkhNQUMuaW5pdChhLApjKSkuZmluYWxpemUoYil9fX0pO3ZhciB3PWQuYWxnbz17fTtyZXR1cm4gZH0oTWF0aCk7CihmdW5jdGlvbih2KXt2YXIgcD1DcnlwdG9KUyxkPXAubGliLHU9ZC5CYXNlLHI9ZC5Xb3JkQXJyYXkscD1wLng2ND17fTtwLldvcmQ9dS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oZixzKXt0aGlzLmhpZ2g9Zjt0aGlzLmxvdz1zfX0pO3AuV29yZEFycmF5PXUuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGYscyl7Zj10aGlzLndvcmRzPWZ8fFtdO3RoaXMuc2lnQnl0ZXM9cyE9dj9zOjgqZi5sZW5ndGh9LHRvWDMyOmZ1bmN0aW9uKCl7Zm9yKHZhciBmPXRoaXMud29yZHMscz1mLmxlbmd0aCxkPVtdLHA9MDtwPHM7cCsrKXt2YXIgZT1mW3BdO2QucHVzaChlLmhpZ2gpO2QucHVzaChlLmxvdyl9cmV0dXJuIHIuY3JlYXRlKGQsdGhpcy5zaWdCeXRlcyl9LGNsb25lOmZ1bmN0aW9uKCl7Zm9yKHZhciBmPXUuY2xvbmUuY2FsbCh0aGlzKSxkPWYud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKSxwPWQubGVuZ3RoLHI9MDtyPHA7cisrKWRbcl09ZFtyXS5jbG9uZSgpO3JldHVybiBmfX0pfSkoKTsKKGZ1bmN0aW9uKHYpe2Zvcih2YXIgcD1DcnlwdG9KUyxkPXAubGliLHU9ZC5Xb3JkQXJyYXkscj1kLkhhc2hlcixmPXAueDY0LldvcmQsZD1wLmFsZ28scz1bXSx4PVtdLHk9W10sZT0xLHE9MCx0PTA7MjQ+dDt0Kyspe3NbZSs1KnFdPSh0KzEpKih0KzIpLzIlNjQ7dmFyIHc9KDIqZSszKnEpJTUsZT1xJTUscT13fWZvcihlPTA7NT5lO2UrKylmb3IocT0wOzU+cTtxKyspeFtlKzUqcV09cSs1KigoMiplKzMqcSklNSk7ZT0xO2ZvcihxPTA7MjQ+cTtxKyspe2Zvcih2YXIgYT13PXQ9MDs3PmE7YSsrKXtpZihlJjEpe3ZhciBiPSgxPDxhKS0xOzMyPmI/d149MTw8Yjp0Xj0xPDxiLTMyfWU9ZSYxMjg/ZTw8MV4xMTM6ZTw8MX15W3FdPWYuY3JlYXRlKHQsdyl9Zm9yKHZhciBjPVtdLGU9MDsyNT5lO2UrKyljW2VdPWYuY3JlYXRlKCk7ZD1kLlNIQTM9ci5leHRlbmQoe2NmZzpyLmNmZy5leHRlbmQoe291dHB1dExlbmd0aDo1MTJ9KSxfZG9SZXNldDpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLl9zdGF0ZT0KW10sYj0wOzI1PmI7YisrKWFbYl09bmV3IGYuaW5pdDt0aGlzLmJsb2NrU2l6ZT0oMTYwMC0yKnRoaXMuY2ZnLm91dHB1dExlbmd0aCkvMzJ9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihhLGIpe2Zvcih2YXIgZT10aGlzLl9zdGF0ZSxmPXRoaXMuYmxvY2tTaXplLzIsaD0wO2g8ZjtoKyspe3ZhciBsPWFbYisyKmhdLG09YVtiKzIqaCsxXSxsPShsPDw4fGw+Pj4yNCkmMTY3MTE5MzV8KGw8PDI0fGw+Pj44KSY0Mjc4MjU1MzYwLG09KG08PDh8bT4+PjI0KSYxNjcxMTkzNXwobTw8MjR8bT4+PjgpJjQyNzgyNTUzNjAsZz1lW2hdO2cuaGlnaF49bTtnLmxvd149bH1mb3IoZj0wOzI0PmY7ZisrKXtmb3IoaD0wOzU+aDtoKyspe2Zvcih2YXIgZD1sPTAsaz0wOzU+aztrKyspZz1lW2grNSprXSxsXj1nLmhpZ2gsZF49Zy5sb3c7Zz1jW2hdO2cuaGlnaD1sO2cubG93PWR9Zm9yKGg9MDs1Pmg7aCsrKXtnPWNbKGgrNCklNV07bD1jWyhoKzEpJTVdO209bC5oaWdoO2s9bC5sb3c7bD1nLmhpZ2heCihtPDwxfGs+Pj4zMSk7ZD1nLmxvd14oazw8MXxtPj4+MzEpO2ZvcihrPTA7NT5rO2srKylnPWVbaCs1KmtdLGcuaGlnaF49bCxnLmxvd149ZH1mb3IobT0xOzI1Pm07bSsrKWc9ZVttXSxoPWcuaGlnaCxnPWcubG93LGs9c1ttXSwzMj5rPyhsPWg8PGt8Zz4+PjMyLWssZD1nPDxrfGg+Pj4zMi1rKToobD1nPDxrLTMyfGg+Pj42NC1rLGQ9aDw8ay0zMnxnPj4+NjQtayksZz1jW3hbbV1dLGcuaGlnaD1sLGcubG93PWQ7Zz1jWzBdO2g9ZVswXTtnLmhpZ2g9aC5oaWdoO2cubG93PWgubG93O2ZvcihoPTA7NT5oO2grKylmb3Ioaz0wOzU+aztrKyspbT1oKzUqayxnPWVbbV0sbD1jW21dLG09Y1soaCsxKSU1KzUqa10sZD1jWyhoKzIpJTUrNSprXSxnLmhpZ2g9bC5oaWdoXn5tLmhpZ2gmZC5oaWdoLGcubG93PWwubG93Xn5tLmxvdyZkLmxvdztnPWVbMF07aD15W2ZdO2cuaGlnaF49aC5oaWdoO2cubG93Xj1oLmxvd319LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fZGF0YSwKYj1hLndvcmRzLGM9OCphLnNpZ0J5dGVzLGU9MzIqdGhpcy5ibG9ja1NpemU7YltjPj4+NV18PTE8PDI0LWMlMzI7Ylsodi5jZWlsKChjKzEpL2UpKmU+Pj41KS0xXXw9MTI4O2Euc2lnQnl0ZXM9NCpiLmxlbmd0aDt0aGlzLl9wcm9jZXNzKCk7Zm9yKHZhciBhPXRoaXMuX3N0YXRlLGI9dGhpcy5jZmcub3V0cHV0TGVuZ3RoLzgsYz1iLzgsZT1bXSxoPTA7aDxjO2grKyl7dmFyIGQ9YVtoXSxmPWQuaGlnaCxkPWQubG93LGY9KGY8PDh8Zj4+PjI0KSYxNjcxMTkzNXwoZjw8MjR8Zj4+PjgpJjQyNzgyNTUzNjAsZD0oZDw8OHxkPj4+MjQpJjE2NzExOTM1fChkPDwyNHxkPj4+OCkmNDI3ODI1NTM2MDtlLnB1c2goZCk7ZS5wdXNoKGYpfXJldHVybiBuZXcgdS5pbml0KGUsYil9LGNsb25lOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXIuY2xvbmUuY2FsbCh0aGlzKSxiPWEuX3N0YXRlPXRoaXMuX3N0YXRlLnNsaWNlKDApLGM9MDsyNT5jO2MrKyliW2NdPWJbY10uY2xvbmUoKTtyZXR1cm4gYX19KTsKcC5TSEEzPXIuX2NyZWF0ZUhlbHBlcihkKTtwLkhtYWNTSEEzPXIuX2NyZWF0ZUhtYWNIZWxwZXIoZCl9KShNYXRoKTsK',
'/libs/crypto_js/rollups/sha384.js':'',
'/libs/crypto_js/rollups/sha512.js':'',
'/Lib/collections.py':'',
'/Lib/dis.py':'ZGVmIGRpcyhzcmMpOgogICAgcmV0dXJuIEpTT2JqZWN0KF9fQlJZVEhPTl9fLnB5MmpzKHNyYykpLnRvX2pzKCkK',
'/Lib/errno.py':'IlRoaXMgbW9kdWxlIG1ha2VzIGF2YWlsYWJsZSBzdGFuZGFyZCBlcnJubyBzeXN0ZW0gc3ltYm9scy5cblxuVGhlIHZhbHVlIG9mIGVhY2ggc3ltYm9sIGlzIHRoZSBjb3JyZXNwb25kaW5nIGludGVnZXIgdmFsdWUsXG5lLmcuLCBvbiBtb3N0IHN5c3RlbXMsIGVycm5vLkVOT0VOVCBlcXVhbHMgdGhlIGludGVnZXIgMi5cblxuVGhlIGRpY3Rpb25hcnkgZXJybm8uZXJyb3Jjb2RlIG1hcHMgbnVtZXJpYyBjb2RlcyB0byBzeW1ib2wgbmFtZXMsXG5lLmcuLCBlcnJuby5lcnJvcmNvZGVbMl0gY291bGQgYmUgdGhlIHN0cmluZyAnRU5PRU5UJy5cblxuU3ltYm9scyB0aGF0IGFyZSBub3QgcmVsZXZhbnQgdG8gdGhlIHVuZGVybHlpbmcgc3lzdGVtIGFyZSBub3QgZGVmaW5lZC5cblxuVG8gbWFwIGVycm9yIGNvZGVzIHRvIGVycm9yIG1lc3NhZ2VzLCB1c2UgdGhlIGZ1bmN0aW9uIG9zLnN0cmVycm9yKCksXG5lLmcuIG9zLnN0cmVycm9yKDIpIGNvdWxkIHJldHVybiAnTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeScuIgoKRTJCSUcgPSA3CkVBQ0NFUyA9IDEzCkVBRERSSU5VU0UgPSA5OApFQUREUk5PVEFWQUlMID0gOTkKRUFEViA9IDY4CkVBRk5PU1VQUE9SVCA9IDk3CkVBR0FJTiA9IDExCkVBTFJFQURZID0gMTE0CkVCQURFID0gNTIKRUJBREYgPSA5CkVCQURGRCA9IDc3CkVCQURNU0cgPSA3NApFQkFEUiA9IDUzCkVCQURSUUMgPSA1NgpFQkFEU0xUID0gNTcKRUJGT05UID0gNTkKRUJVU1kgPSAxNgpFQ0hJTEQgPSAxMApFQ0hSTkcgPSA0NApFQ09NTSA9IDcwCkVDT05OQUJPUlRFRCA9IDEwMwpFQ09OTlJFRlVTRUQgPSAxMTEKRUNPTk5SRVNFVCA9IDEwNApFREVBRExLID0gMzUKRURFQURMT0NLID0gMzUKRURFU1RBRERSUkVRID0gODkKRURPTSA9IDMzCkVET1RET1QgPSA3MwpFRFFVT1QgPSAxMjIKRUVYSVNUID0gMTcKRUZBVUxUID0gMTQKRUZCSUcgPSAyNwpFSE9TVERPV04gPSAxMTIKRUhPU1RVTlJFQUNIID0gMTEzCkVJRFJNID0gNDMKRUlMU0VRID0gODQKRUlOUFJPR1JFU1MgPSAxMTUKRUlOVFIgPSA0CkVJTlZBTCA9IDIyCkVJTyA9IDUKRUlTQ09OTiA9IDEwNgpFSVNESVIgPSAyMQpFSVNOQU0gPSAxMjAKRUwySExUID0gNTEKRUwyTlNZTkMgPSA0NQpFTDNITFQgPSA0NgpFTDNSU1QgPSA0NwpFTElCQUNDID0gNzkKRUxJQkJBRCA9IDgwCkVMSUJFWEVDID0gODMKRUxJQk1BWCA9IDgyCkVMSUJTQ04gPSA4MQpFTE5STkcgPSA0OApFTE9PUCA9IDQwCkVNRklMRSA9IDI0CkVNTElOSyA9IDMxCkVNU0dTSVpFID0gOTAKRU1VTFRJSE9QID0gNzIKRU5BTUVUT09MT05HID0gMzYKRU5BVkFJTCA9IDExOQpFTkVURE9XTiA9IDEwMApFTkVUUkVTRVQgPSAxMDIKRU5FVFVOUkVBQ0ggPSAxMDEKRU5GSUxFID0gMjMKRU5PQU5PID0gNTUKRU5PQlVGUyA9IDEwNQpFTk9DU0kgPSA1MApFTk9EQVRBID0gNjEKRU5PREVWID0gMTkKRU5PRU5UID0gMgpFTk9FWEVDID0gOApFTk9MQ0sgPSAzNwpFTk9MSU5LID0gNjcKRU5PTUVNID0gMTIKRU5PTVNHID0gNDIKRU5PTkVUID0gNjQKRU5PUEtHID0gNjUKRU5PUFJPVE9PUFQgPSA5MgpFTk9TUEMgPSAyOApFTk9TUiA9IDYzCkVOT1NUUiA9IDYwCkVOT1NZUyA9IDM4CkVOT1RCTEsgPSAxNQpFTk9UQ09OTiA9IDEwNwpFTk9URElSID0gMjAKRU5PVEVNUFRZID0gMzkKRU5PVE5BTSA9IDExOApFTk9UU09DSyA9IDg4CkVOT1RUWSA9IDI1CkVOT1RVTklRID0gNzYKRU5YSU8gPSA2CkVPUE5PVFNVUFAgPSA5NQpFT1ZFUkZMT1cgPSA3NQpFUEVSTSA9IDEKRVBGTk9TVVBQT1JUID0gOTYKRVBJUEUgPSAzMgpFUFJPVE8gPSA3MQpFUFJPVE9OT1NVUFBPUlQgPSA5MwpFUFJPVE9UWVBFID0gOTEKRVJBTkdFID0gMzQKRVJFTUNIRyA9IDc4CkVSRU1PVEUgPSA2NgpFUkVNT1RFSU8gPSAxMjEKRVJFU1RBUlQgPSA4NQpFUk9GUyA9IDMwCkVTSFVURE9XTiA9IDEwOApFU09DS1ROT1NVUFBPUlQgPSA5NApFU1BJUEUgPSAyOQpFU1JDSCA9IDMKRVNSTU5UID0gNjkKRVNUQUxFID0gMTE2CkVTVFJQSVBFID0gODYKRVRJTUUgPSA2MgpFVElNRURPVVQgPSAxMTAKRVRPT01BTllSRUZTID0gMTA5CkVUWFRCU1kgPSAyNgpFVUNMRUFOID0gMTE3CkVVTkFUQ0ggPSA0OQpFVVNFUlMgPSA4NwpFV09VTERCTE9DSyA9IDExCkVYREVWID0gMTgKRVhGVUxMID0gNTQKIyBlcnJvcmNvZGUK',
'/Lib/itertools.py':'IyBkb3dubG9hZGVkIGZyb20gaHR0cDovL3NoZWRza2luLmdvb2dsZWNvZGUuY29tL3N2bi1oaXN0b3J5L3IxMjc5L3RydW5rL3NoZWRza2luL2xpYi9pdGVydG9vbHMucHkKIyBodHRwOi8vZG9jcy5weXRob24ub3JnL2Rldi9fc291cmNlcy9saWJyYXJ5L2l0ZXJ0b29scy50eHQKCiMgSW5maW5pdGUgSXRlcmF0b3JzCgpkZWYgY291bnQoc3RhcnQgPSAwLCBzdGVwID0gMSk6CiAgICB5aWVsZCBzdGFydAoKZGVmIGN5Y2xlKGl0ZXJhYmxlKToKICAgIHlpZWxkIGl0ZXIoaXRlcmFibGUpLm5leHQoKQoKZGVmIHJlcGVhdChvYmplY3QsIHRpbWVzID0gMCk6CiAgICB5aWVsZCBvYmplY3QKCiMgSXRlcmF0b3JzIHRlcm1pbmF0aW5nIG9uIHRoZSBzaG9ydGVzdCBpbnB1dCBpdGVyYWJsZXVlbmNlCgpkZWYgY2hhaW4oKml0ZXJhYmxlcyk6CiAgICB5aWVsZCBpdGVyKGl0ZXJhYmxlcykubmV4dCgpCgpkZWYgY29tcHJlc3MoZGF0YSwgc2VsZWN0b3JzKToKICAgIGl0ZXIoc2VsZWN0b3JzKS5uZXh0KCkKICAgIHlpZWxkIGl0ZXIoZGF0YSkubmV4dCgpCgpkZWYgX19wcmVkX2VsZW0ocHJlZGljYXRlLCBpdGVyYWJsZSk6CiAgICBlbGVtID0gaXRlcihpdGVyYWJsZSkubmV4dCgpCiAgICBwcmVkaWNhdGUoZWxlbSkKICAgIHJldHVybiBlbGVtCgpkZWYgZHJvcHdoaWxlKHByZWRpY2F0ZSwgaXRlcmFibGUpOgogICAgeWllbGQgX19wcmVkX2VsZW0ocHJlZGljYXRlLCBpdGVyYWJsZSkKCmRlZiBncm91cGJ5KGl0ZXJhYmxlLCBrZXkgPSBsYW1iZGEgeDogeCk6CiAgICB5aWVsZCBrZXkoaXRlcihpdGVyYWJsZSkubmV4dCgpKSwgaXRlcihpdGVyYWJsZSkKCmRlZiBpZmlsdGVyKHByZWRpY2F0ZSwgaXRlcmFibGUpOgogICAgeWllbGQgX19wcmVkX2VsZW0ocHJlZGljYXRlLCBpdGVyYWJsZSkKCmRlZiBpZmlsdGVyZmFsc2UocHJlZGljYXRlLCBpdGVyYWJsZSk6CiAgICB5aWVsZCBfX3ByZWRfZWxlbShwcmVkaWNhdGUsIGl0ZXJhYmxlKQoKZGVmIHRha2V3aGlsZShwcmVkaWNhdGUsIGl0ZXJhYmxlKToKICAgIHlpZWxkIF9fcHJlZF9lbGVtKHByZWRpY2F0ZSwgaXRlcmFibGUpCgpkZWYgaXNsaWNlKGl0ZXJhYmxlLCBzdGFydCwgc3RvcCA9IC0xLCBzdGVwID0gLTEpOgogICAgJ0tub3duIGxpbWl0YXRpb25zOiBjYW5ub3QgZGlzdGluZ3Vpc2ggYmV0d2VlbiAwIGFuZCBOb25lIGZvciB0aGUgc3RvcCBhcmd1bWVudCcKICAgIHlpZWxkIGl0ZXIoaXRlcmFibGUpLm5leHQoKQoKZGVmIGltYXAoZnVuY3Rpb24sICppdGVyYWJsZXMpOgogICAgJ0tub3duIGxpbWl0YXRpb25zOiBubyBtb3JlIHRoYW4gNSBpdGVyYWJsZXMgYXJlIHN1cHBvcnRlZCcKICAgIHlpZWxkIGZ1bmN0aW9uKCppdGVyKGl0ZXJhYmxlcykubmV4dCgpKQoKZGVmIF9faW1hcDMoZnVuY3Rpb24sIGl0ZXIxLCBpdGVyMik6CiAgICB5aWVsZCBmdW5jdGlvbihpdGVyKGl0ZXIxKS5uZXh0KCksIGl0ZXIoaXRlcjIpLm5leHQoKSkKCmRlZiBfX2ltYXA0KGZ1bmN0aW9uLCBpdGVyMSwgaXRlcjIsIGl0ZXIzKToKICAgIHlpZWxkIGZ1bmN0aW9uKGl0ZXIoaXRlcjEpLm5leHQoKSwgaXRlcihpdGVyMikubmV4dCgpLCBpdGVyKGl0ZXIzKS5uZXh0KCkpCgpkZWYgX19pbWFwNShmdW5jdGlvbiwgaXRlcjEsIGl0ZXIyLCBpdGVyMywgaXRlcjQpOgogICAgeWllbGQgZnVuY3Rpb24oaXRlcihpdGVyMSkubmV4dCgpLCBpdGVyKGl0ZXIyKS5uZXh0KCksIGl0ZXIoaXRlcjMpLm5leHQoKSwgaXRlcihpdGVyNCkubmV4dCgpKQoKZGVmIF9faW1hcDYoZnVuY3Rpb24sIGl0ZXIxLCBpdGVyMiwgaXRlcjMsIGl0ZXI0LCBpdGVyNSk6CiAgICB5aWVsZCBmdW5jdGlvbihpdGVyKGl0ZXIxKS5uZXh0KCksIGl0ZXIoaXRlcjIpLm5leHQoKSwgaXRlcihpdGVyMykubmV4dCgpLCBpdGVyKGl0ZXI0KS5uZXh0KCksIGl0ZXIoaXRlcjUpLm5leHQoKSkKCmRlZiBzdGFybWFwKGZ1bmN0aW9uLCBpdGVyYWJsZSk6CiAgICB5aWVsZCBmdW5jKCppdGVyYWJsZVswXSkKCmRlZiB0ZWUoaXRlcmFibGUsIG4gPSAyKToKICAgIHJldHVybiBpdGVyKGl0ZXJhYmxlKSwgaXRlcihpdGVyYWJsZSkKCmRlZiBpemlwKCppdGVyYWJsZXMpOgogICAgJ0tub3duIGxpbWl0YXRpb25zOiBpdGVyYWJsZXMgbXVzdCBhbGwgYmUgb2YgdGhlIHNhbWUgdHlwZSBpZiB0aGV5IGFyZSBtb3JlIHRoYW4gdHdvJwogICAgeWllbGQgaXRlcihpdGVyYWJsZXMpLm5leHQoKSwKCmRlZiBfX2l6aXAyKGl0ZXJhYmxlMSwgaXRlcmFibGUyKToKICAgIHlpZWxkIGl0ZXIoaXRlcmFibGUxKS5uZXh0KCksIGl0ZXIoaXRlcmFibGUyKS5uZXh0KCkKCmRlZiBpemlwX2xvbmdlc3QoX19rd19maWxsdmFsdWU9Tm9uZSwgKml0ZXJhYmxlcyk6CiAgICAnS25vd24gbGltaXRhdGlvbnM6IGl0ZXJhYmxlcyBtdXN0IGFsbCBiZSBvZiB0aGUgc2FtZSB0eXBlLCBjYW5ub3QgZGlzdGluZ3Vpc2ggYmV0d2VlbiAwIGFuZCBOb25lIGZvciB0aGUgcmV0dXJuIHZhbHVlJwogICAgeWllbGQgaXRlcihpdGVyYWJsZXMpLm5leHQoKSwKCmRlZiBfX2l6aXBfbG9uZ2VzdDIoaXRlcmFibGUxLCBpdGVyYWJsZTIsIF9fa3dfZmlsbHZhbHVlPU5vbmUpOgogICAgeWllbGQgaXRlcihpdGVyYWJsZTEpLm5leHQoKSwgaXRlcihpdGVyYWJsZTIpLm5leHQoKQoKIyBDb21iaW5hdG9yaWMgZ2VuZXJhdG9ycwoKZGVmIHByb2R1Y3QoX19rd19yZXBlYXQ9MSwgKml0ZXJhYmxlcyk6CiAgICAnS25vd24gbGltaXRhdGlvbnM6IGl0ZXJhYmxlcyBtdXN0IGFsbCBiZSBvZiB0aGUgc2FtZSB0eXBlIGlmIHRoZXkgYXJlIG1vcmUgdGhhbiB0d28nCiAgICB5aWVsZCBpdGVyKGl0ZXJhYmxlcykubmV4dCgpLAoKZGVmIF9fcHJvZHVjdDIoaXRlcmFibGUxLCBpdGVyYWJsZTIsIF9fa3dfcmVwZWF0PTEpOgogICAgeWllbGQgaXRlcihpdGVyYWJsZTEpLm5leHQoKSwgaXRlcihpdGVyYWJsZTIpLm5leHQoKQoKZGVmIHBlcm11dGF0aW9ucyhpdGVyYWJsZSwgciA9IE5vbmUpOgogICAgeWllbGQgaXRlcihpdGVyYWJsZSkubmV4dCgpLAoKZGVmIGNvbWJpbmF0aW9ucyhpdGVyYWJsZSwgcik6CiAgICB5aWVsZCBpdGVyKGl0ZXJhYmxlKS5uZXh0KCksCgpkZWYgY29tYmluYXRpb25zX3dpdGhfcmVwbGFjZW1lbnQoaXRlcmFibGUsIHIpOgogICAgeWllbGQgaXRlcihpdGVyYWJsZSkubmV4dCgpLAo=',
'/Lib/keyword.py':'a3dsaXN0ID0gWwojLS1zdGFydCBrZXl3b3Jkcy0tCiAgICAgICAgJ0ZhbHNlJywKICAgICAgICAnTm9uZScsCiAgICAgICAgJ1RydWUnLAogICAgICAgICdhbmQnLAogICAgICAgICdhcycsCiAgICAgICAgJ2Fzc2VydCcsCiAgICAgICAgJ2JyZWFrJywKICAgICAgICAnY2xhc3MnLAogICAgICAgICdjb250aW51ZScsCiAgICAgICAgJ2RlZicsCiAgICAgICAgJ2RlbCcsCiAgICAgICAgJ2VsaWYnLAogICAgICAgICdlbHNlJywKICAgICAgICAnZXhjZXB0JywKICAgICAgICAnZmluYWxseScsCiAgICAgICAgJ2ZvcicsCiAgICAgICAgJ2Zyb20nLAogICAgICAgICdnbG9iYWwnLAogICAgICAgICdpZicsCiAgICAgICAgJ2ltcG9ydCcsCiAgICAgICAgJ2luJywKICAgICAgICAnaXMnLAogICAgICAgICdsYW1iZGEnLAogICAgICAgICdub25sb2NhbCcsCiAgICAgICAgJ25vdCcsCiAgICAgICAgJ29yJywKICAgICAgICAncGFzcycsCiAgICAgICAgJ3JhaXNlJywKICAgICAgICAncmV0dXJuJywKICAgICAgICAndHJ5JywKICAgICAgICAnd2hpbGUnLAogICAgICAgICd3aXRoJywKICAgICAgICAneWllbGQnLAojLS1lbmQga2V5d29yZHMtLQogICAgICAgIF0KCmRlZiBpc2tleXdvcmQod29yZCk6CiAgICByZXR1cm4gd29yZCBpbiBrd2xpc3QK',
'/Lib/locale.py':'ZGVmIGdldGRlZmF1bHRsb2NhbGUoKToKICAgIHJldHVybiBfX0JSWVRIT05fXy5sYW5ndWFnZSxOb25l',
'/Lib/local_storage.py':'IyBsb2NhbCBzdG9yYWdlIGluIGJyb3dzZXIKCmNsYXNzIExvY2FsU3RvcmFnZToKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgaWYgbm90IF9fQlJZVEhPTl9fLmhhc19sb2NhbF9zdG9yYWdlOgogICAgICAgICAgICByYWlzZSBOYW1lRXJyb3IoJ2xvY2FsIHN0b3JhZ2UgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYnJvd3NlcicpCiAgICAgICAgc2VsZi5zdG9yZSA9IF9fQlJZVEhPTl9fLmxvY2FsX3N0b3JhZ2UoKQogICAgICAgIAogICAgZGVmIF9fZGVsaXRlbV9fKHNlbGYsa2V5KToKICAgICAgICBzZWxmLnN0b3JlLnJlbW92ZUl0ZW0oa2V5KQoKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLGtleSk6CiAgICAgICAgcmVzPXNlbGYuc3RvcmUuZ2V0SXRlbShrZXkpCiAgICAgICAgaWYgcmVzOgogICAgICAgICAgIHJldHVybiByZXMKCiAgICAgICAgcmFpc2UgS2V5RXJyb3Ioa2V5KQoKICAgIGRlZiBfX3NldGl0ZW1fXyhzZWxmLGtleSx2YWx1ZSk6CiAgICAgICAgc2VsZi5zdG9yZS5zZXRJdGVtKGtleSx2YWx1ZSkKCiAgICAjaW1wbGVtZW50ICJpbiIgZnVuY3Rpb25hbGl0eQogICAgZGVmIF9fY29udGFpbnNfXyhzZWxmLCBrZXkpOgogICAgICAgIHJlcz1zZWxmLnN0b3JlLmdldEl0ZW0oa2V5KQogICAgICAgIGlmIHJlczoKICAgICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICAgICByZXR1cm4gRmFsc2UKCnN0b3JhZ2UgPSBMb2NhbFN0b3JhZ2UoKQoK',
'/Lib/markdown.py':'',
'/Lib/operator.py':'IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwoiIiIKT3BlcmF0b3IgSW50ZXJmYWNlCgpUaGlzIG1vZHVsZSBleHBvcnRzIGEgc2V0IG9mIGZ1bmN0aW9ucyBjb3JyZXNwb25kaW5nIHRvIHRoZSBpbnRyaW5zaWMgCm9wZXJhdG9ycyBvZiBQeXRob24uICBGb3IgZXhhbXBsZSwgb3BlcmF0b3IuYWRkKHgsIHkpIGlzIGVxdWl2YWxlbnQgCnRvIHRoZSBleHByZXNzaW9uIHgreS4gIFRoZSBmdW5jdGlvbiBuYW1lcyBhcmUgdGhvc2UgdXNlZCBmb3Igc3BlY2lhbCAKbWV0aG9kczsgdmFyaWFudHMgd2l0aG91dCBsZWFkaW5nIGFuZCB0cmFpbGluZyAnX18nIGFyZSBhbHNvIHByb3ZpZGVkIApmb3IgY29udmVuaWVuY2UuCgpUaGlzIGlzIHRoZSBwdXJlIFB5dGhvbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgbW9kdWxlLgoiIiIKCiMgZG93bmxvYWRlZCBmcm9tIGh0dHA6Ly9idWdzLnB5dGhvbi5vcmcvZmlsZTI4MzI3L29wZXJhdG9yLnB5CgojaW1wb3J0IGJ1aWx0aW5zIGFzIF9iaSAgI3RoZXJlIGlzIG5vIGJ1aWx0aW5zIG1vZHVsZQoKZGVmIGx0KGEsIGIpOgogICAgIlNhbWUgYXMgYSA8IGIuIgogICAgcmV0dXJuIGEgPCBiCl9fbHRfXyA9IGx0CgpkZWYgbGUoYSwgYik6CiAgICAiU2FtZSBhcyBhIDw9IGIuIgogICAgcmV0dXJuIGEgPD0gYgpfX2xlX18gPSBsZQoKZGVmIGVxKGEsIGIpOgogICAgIlNhbWUgYXMgYSA9PSBiLiIKICAgIHJldHVybiBhID09IGIKX19lcV9fID0gZXEKCmRlZiBuZShhLCBiKToKICAgICJTYW1lIGFzIGEgIT0gYi4iCiAgICByZXR1cm4gYSAhPSBiCl9fbmVfXyA9IG5lCgpkZWYgZ2UoYSwgYik6CiAgICAiU2FtZSBhcyBhID49IGIuIgogICAgcmV0dXJuIGEgPj0gYgpfX2dlX18gPSBnZQoKZGVmIGd0KGEsIGIpOgogICAgIlNhbWUgYXMgYSA+IGIuIgogICAgcmV0dXJuIGEgPiBiCl9fZ3RfXyA9IGd0CgpkZWYgbm90XyhhKToKICAgICJTYW1lIGFzIG5vdCBhLiIKICAgIHJldHVybiBub3QgYQpfX25vdF9fID0gbm90XwoKZGVmIHRydXRoKGEpOgogICAgIlJldHVybiBUcnVlIGlmIGEgaXMgdHJ1ZSwgRmFsc2Ugb3RoZXJ3aXNlLiIKICAgICNyZXR1cm4gX2JpLmJvb2woYSkKICAgIHJldHVybiBib29sKGEpCgpkZWYgaXNfKGEsIGIpOgogICAgIlNhbWUgYXMgYSBpcyBiLiIKICAgIHJldHVybiBhIGlzIGIKCiMgYnJ5dGhvbiBkb2VzIG5vdCBsaWtlICAoY2F1c2VzIHN5bnRheCBlcnJvcikKI2RlZiBpc19ub3QoYSwgYik6CiMgICAgIlNhbWUgYXMgYSBpcyBub3QgYi4iCiMgICAgcmV0dXJuIGEgaXMgbm90IGIKCiNyZWN1cnNpb24gZXJyb3Igb3IganVzdCBjb21tZW50IG91dCBhbmQgYWRkIGNvZGUgYmVsb3cgZnVuY3Rpb24KI2RlZiBhYnMoYSk6CiMgICAgIlNhbWUgYXMgYWJzKGEpLiIKIyAgICAjcmV0dXJuIF9iaS5hYnMoYSkKIyAgICByZXR1cm4gYWJzKGEpCl9fYWJzX18gPSBhYnMKYWJzPWFicwoKCmRlZiBhZGQoYSwgYik6CiAgICAiU2FtZSBhcyBhICsgYi4iCiAgICByZXR1cm4gYSArIGIKX19hZGRfXyA9IGFkZAoKZGVmIGFuZF8oYSwgYik6CiAgICAiU2FtZSBhcyBhICYgYi4iCiAgICByZXR1cm4gYSAmIGIKX19hbmRfXyA9IGFuZF8KCmRlZiBmbG9vcmRpdihhLCBiKToKICAgICJTYW1lIGFzIGEgLy8gYi4iCiAgICByZXR1cm4gYSAvLyBiCl9fZmxvb3JkaXZfXyA9IGZsb29yZGl2CgpkZWYgaW5kZXgoYSk6CiAgICAiU2FtZSBhcyBhLl9faW5kZXhfXygpLiIKICAgIHJldHVybiBhLl9faW5kZXhfXygpCl9faW5kZXhfXyA9IGluZGV4CgpkZWYgaW52KGEpOgogICAgIlNhbWUgYXMgfmEuIgogICAgI3JldHVybiB+YSAgICAjYnJ5dGhvbiBkb2VzIG5vdCBsaWtlCiAgICByZXR1cm4gYV4oMioqMzEpCmludmVydCA9IF9faW52X18gPSBfX2ludmVydF9fID0gaW52CgpkZWYgbHNoaWZ0KGEsIGIpOgogICAgIlNhbWUgYXMgYSA8PCBiLiIKICAgIHJldHVybiBhIDw8IGIKX19sc2hpZnRfXyA9IGxzaGlmdAoKZGVmIG1vZChhLCBiKToKICAgICJTYW1lIGFzIGEgJSBiLiIKICAgIHJldHVybiBhICUgYgpfX21vZF9fID0gbW9kCgpkZWYgbXVsKGEsIGIpOgogICAgIlNhbWUgYXMgYSAqIGIuIgogICAgcmV0dXJuIGEgKiBiCl9fbXVsX18gPSBtdWwKCmRlZiBuZWcoYSk6CiAgICAiU2FtZSBhcyAtYS4iCiAgICByZXR1cm4gLWEKX19uZWdfXyA9IG5lZwoKZGVmIG9yXyhhLCBiKToKICAgICJTYW1lIGFzIGEgfCBiLiIKICAgIHJldHVybiBhIHwgYgpfX29yX18gPSBvcl8KCmRlZiBwb3MoYSk6CiAgICAiU2FtZSBhcyArYS4iCiAgICAjcmV0dXJuICthICAgICNicnl0aG9uIGRvZXMgbm90IGxpa2UKICAgIGlmIGEgPj0gMDogcmV0dXJuIGEKICAgIHJldHVybiAtYQpfX3Bvc19fID0gcG9zCgpkZWYgcG93KGEsIGIpOgogICAgIlNhbWUgYXMgYSAqKiBiLiIKICAgIHJldHVybiBhICoqIGIKX19wb3dfXyA9IHBvdwoKZGVmIHJzaGlmdChhLCBiKToKICAgICJTYW1lIGFzIGEgPj4gYi4iCiAgICByZXR1cm4gYSA+PiBiCl9fcnNoaWZ0X18gPSByc2hpZnQKCmRlZiBzdWIoYSwgYik6CiAgICAiU2FtZSBhcyBhIC0gYi4iCiAgICByZXR1cm4gYSAtIGIKX19zdWJfXyA9IHN1YgoKZGVmIHRydWVkaXYoYSwgYik6CiAgICAiU2FtZSBhcyBhIC8gYi4iCiAgICByZXR1cm4gYSAvIGIKX190cnVlZGl2X18gPSB0cnVlZGl2CgpkZWYgeG9yKGEsIGIpOgogICAgIlNhbWUgYXMgYSBeIGIuIgogICAgcmV0dXJuIGEgXiBiCl9feG9yX18gPSB4b3IKCmRlZiBjb25jYXQoYSwgYik6CiAgICAiU2FtZSBhcyBhICsgYiwgZm9yIGEgYW5kIGIgc2VxdWVuY2VzLiIKICAgIGlmIG5vdCAoaGFzYXR0cihhLCAnX19nZXRpdGVtX18nKSBhbmQgaGFzYXR0cihiLCAnX19nZXRpdGVtX18nKSk6CiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdhIGFuZCBiIG11c3QgYmUgc2VxdWVuY2VzJykKICAgIHJldHVybiBhICsgYgpfX2NvbmNhdF9fID0gY29uY2F0CgpkZWYgY29udGFpbnMoYSwgYik6CiAgICAiU2FtZSBhcyBiIGluIGEgKG5vdGUgcmV2ZXJzZWQgb3BlcmFuZHMpLiIKICAgIHJldHVybiBiIGluIGEKX19jb250YWluc19fID0gY29udGFpbnMKCmRlZiBjb3VudE9mKGEsIGIpOgogICAgIlJldHVybiB0aGUgbnVtYmVyIG9mIHRpbWVzIGIgb2NjdXJzIGluIGEuIgogICAgY291bnQgPSAwCiAgICBmb3IgaSBpbiBhOgogICAgICAgIGlmIGkgPT0gYjoKICAgICAgICAgICAgY291bnQgKz0gMQogICAgcmV0dXJuIGNvdW50CgpkZWYgZGVsaXRlbShhLCBiKToKICAgICJTYW1lIGFzIGRlbCBhW2JdLiIKICAgIGRlbCBhW2JdCl9fZGVsaXRlbV9fID0gZGVsaXRlbQoKZGVmIGdldGl0ZW0oYSwgYik6CiAgICAiU2FtZSBhcyBhW2JdLiIKICAgIHJldHVybiBhW2JdCl9fZ2V0aXRlbV9fID0gZ2V0aXRlbQoKI2ZpeG1lICBicnl0aG9uIGRvZXNuJ3QgbGlrZSB0aGlzIGZ1bmN0aW9uCiNkZWYgaW5kZXhPZihhLCBiKToKIyAgICAiUmV0dXJuIHRoZSBmaXJzdCBpbmRleCBvZiBiIGluIGEuIgojICAgIGZvciBpLCBqIGluIF9iaS5lbnVtZXJhdGUoYSk6CiMgICAgICAgIGlmIGogPT0gYjoKIyAgICAgICAgICAgIHJldHVybiBpCiMgICAgZWxzZToKIyAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignYiBub3QgZm91bmQgaW4gYScpCgpkZWYgc2V0aXRlbShhLCBiLCBjKToKICAgICJTYW1lIGFzIGFbYl0gPSBjLiIKICAgIGFbYl0gPSBjCl9fc2V0aXRlbV9fID0gc2V0aXRlbQoKCgpjbGFzcyBhdHRyZ2V0dGVyOgogICAgIiIiCiAgICBSZXR1cm4gYSBjYWxsYWJsZSBvYmplY3QgdGhhdCBmZXRjaGVzIHRoZSBnaXZlbiBhdHRyaWJ1dGUocykgZnJvbSBpdHMgb3BlcmFuZC4KICAgIEFmdGVyIGY9YXR0cmdldHRlcignbmFtZScpLCB0aGUgY2FsbCBmKHIpIHJldHVybnMgci5uYW1lLgogICAgQWZ0ZXIgZz1hdHRyZ2V0dGVyKCduYW1lJywgJ2RhdGUnKSwgdGhlIGNhbGwgZyhyKSByZXR1cm5zIChyLm5hbWUsIHIuZGF0ZSkuCiAgICBBZnRlciBoPWF0dHJnZXR0ZXIoJ25hbWUuZmlyc3QnLCAnbmFtZS5sYXN0JyksIHRoZSBjYWxsIGgocikgcmV0dXJucwogICAgKHIubmFtZS5maXJzdCwgci5uYW1lLmxhc3QpLgogICAgIiIiCiAgICBkZWYgX19pbml0X18oc2VsZiwgYXR0ciwgKmF0dHJzKToKICAgICAgICBzZWxmLl9hdHRycyA9IChhdHRyLCkKICAgICAgICBzZWxmLl9hdHRycyArPSBhdHRycwogICAgICAgIGlmIGFueShub3QgaXNpbnN0YW5jZShhdHRyLCBzdHIpIGZvciBhdHRyIGluIHNlbGYuX2F0dHJzKToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdhdHRyaWJ1dGUgbmFtZSBtdXN0IGJlIGEgc3RyaW5nJykKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgX3Jlc29sdmVfYXR0cihvYmosIGF0dHIpOgogICAgICAgIGZvciBuYW1lIGluIGF0dHIuc3BsaXQoJy4nKToKICAgICAgICAgICAgI29iaiA9IF9iaS5nZXRhdHRyKG9iaiwgbmFtZSkKICAgICAgICAgICAgb2JqID0gZ2V0YXR0cihvYmosIG5hbWUpCiAgICAgICAgcmV0dXJuIG9iagoKICAgIGRlZiBfX2NhbGxfXyhzZWxmLCBvYmopOgogICAgICAgIGlmIGxlbihzZWxmLl9hdHRycykgPT0gMToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3Jlc29sdmVfYXR0cihvYmosIHNlbGYuX2F0dHJzWzBdKQogICAgICAgIHJldHVybiB0dXBsZShzZWxmLl9yZXNvbHZlX2F0dHIob2JqLCBhdHRyKSBmb3IgYXR0ciBpbiBzZWxmLl9hdHRycykKCmNsYXNzIGl0ZW1nZXR0ZXI6CiAgICAiIiIKICAgIFJldHVybiBhIGNhbGxhYmxlIG9iamVjdCB0aGF0IGZldGNoZXMgdGhlIGdpdmVuIGl0ZW0ocykgZnJvbSBpdHMgb3BlcmFuZC4KICAgIEFmdGVyIGY9aXRlbWdldHRlcigyKSwgdGhlIGNhbGwgZihyKSByZXR1cm5zIHJbMl0uCiAgICBBZnRlciBnPWl0ZW1nZXR0ZXIoMiw1LDMpLCB0aGUgY2FsbCBnKHIpIHJldHVybnMgKHJbMl0sIHJbNV0sIHJbM10pCiAgICAiIiIKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBpdGVtLCAqaXRlbXMpOgogICAgICAgIHNlbGYuX2l0ZW1zID0gKGl0ZW0sKQogICAgICAgIHNlbGYuX2l0ZW1zICs9IGl0ZW1zCgogICAgZGVmIF9fY2FsbF9fKHNlbGYsIG9iaik6CiAgICAgICAgaWYgbGVuKHNlbGYuX2l0ZW1zKSA9PSAxOgogICAgICAgICAgICByZXR1cm4gb2JqW3NlbGYuX2l0ZW1zWzBdXQogICAgICAgIHJldHVybiB0dXBsZShvYmpbaXRlbV0gZm9yIGl0ZW0gaW4gc2VsZi5faXRlbXMpCgpjbGFzcyBtZXRob2RjYWxsZXI6CiAgICAiIiIKICAgIFJldHVybiBhIGNhbGxhYmxlIG9iamVjdCB0aGF0IGNhbGxzIHRoZSBnaXZlbiBtZXRob2Qgb24gaXRzIG9wZXJhbmQuCiAgICBBZnRlciBmID0gbWV0aG9kY2FsbGVyKCduYW1lJyksIHRoZSBjYWxsIGYocikgcmV0dXJucyByLm5hbWUoKS4KICAgIEFmdGVyIGcgPSBtZXRob2RjYWxsZXIoJ25hbWUnLCAnZGF0ZScsIGZvbz0xKSwgdGhlIGNhbGwgZyhyKSByZXR1cm5zCiAgICByLm5hbWUoJ2RhdGUnLCBmb289MSkuCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oc2VsZiwgbmFtZSwgKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICBzZWxmLl9uYW1lID0gbmFtZQogICAgICAgIHNlbGYuX2FyZ3MgPSBhcmdzCiAgICAgICAgc2VsZi5fa3dhcmdzID0ga3dhcmdzCgogICAgZGVmIF9fY2FsbF9fKHNlbGYsIG9iaik6CiAgICAgICAgcmV0dXJuIGdldGF0dHIob2JqLCBzZWxmLl9uYW1lKSgqc2VsZi5fYXJncywgKipzZWxmLl9rd2FyZ3MpCgoKZGVmIGlhZGQoYSwgYik6CiAgICAiU2FtZSBhcyBhICs9IGIuIgogICAgYSArPSBiCiAgICByZXR1cm4gYQpfX2lhZGRfXyA9IGlhZGQKCmRlZiBpYW5kKGEsIGIpOgogICAgIlNhbWUgYXMgYSAmPSBiLiIKICAgIGEgJj0gYgogICAgcmV0dXJuIGEKX19pYW5kX18gPSBpYW5kCgpkZWYgaWNvbmNhdChhLCBiKToKICAgICJTYW1lIGFzIGEgKz0gYiwgZm9yIGEgYW5kIGIgc2VxdWVuY2VzLiIKICAgIGlmIG5vdCAoaGFzYXR0cihhLCAnX19nZXRpdGVtX18nKSBhbmQgaGFzYXR0cihiLCAnX19nZXRpdGVtX18nKSk6CiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdhIGFuZCBiIG11c3QgYmUgc2VxdWVuY2VzJykKICAgIGEgKz0gYgogICAgcmV0dXJuIGEKX19pY29uY2F0X18gPSBpY29uY2F0CgpkZWYgaWZsb29yZGl2KGEsIGIpOgogICAgIlNhbWUgYXMgYSAvLz0gYi4iCiAgICBhIC8vPSBiCiAgICByZXR1cm4gYQpfX2lmbG9vcmRpdl9fID0gaWZsb29yZGl2CgpkZWYgaWxzaGlmdChhLCBiKToKICAgICJTYW1lIGFzIGEgPDw9IGIuIgogICAgYSA8PD0gYgogICAgcmV0dXJuIGEKX19pbHNoaWZ0X18gPSBpbHNoaWZ0CgpkZWYgaW1vZChhLCBiKToKICAgICJTYW1lIGFzIGEgJT0gYi4iCiAgICBhICU9IGIKICAgIHJldHVybiBhCl9faW1vZF9fID0gaW1vZAoKZGVmIGltdWwoYSwgYik6CiAgICAiU2FtZSBhcyBhICo9IGIuIgogICAgYSAqPSBiCiAgICByZXR1cm4gYQpfX2ltdWxfXyA9IGltdWwKCmRlZiBpb3IoYSwgYik6CiAgICAiU2FtZSBhcyBhIHw9IGIuIgogICAgYSB8PSBiCiAgICByZXR1cm4gYQpfX2lvcl9fID0gaW9yCgpkZWYgaXBvdyhhLCBiKToKICAgICJTYW1lIGFzIGEgKio9IGIuIgogICAgYSAqKj1iCiAgICByZXR1cm4gYQpfX2lwb3dfXyA9IGlwb3cKCmRlZiBpcnNoaWZ0KGEsIGIpOgogICAgIlNhbWUgYXMgYSA+Pj0gYi4iCiAgICBhID4+PSBiCiAgICByZXR1cm4gYQpfX2lyc2hpZnRfXyA9IGlyc2hpZnQKCmRlZiBpc3ViKGEsIGIpOgogICAgIlNhbWUgYXMgYSAtPSBiLiIKICAgIGEgLT0gYgogICAgcmV0dXJuIGEKX19pc3ViX18gPSBpc3ViCgpkZWYgaXRydWVkaXYoYSwgYik6CiAgICAiU2FtZSBhcyBhIC89IGIuIgogICAgYSAvPSBiCiAgICByZXR1cm4gYQpfX2l0cnVlZGl2X18gPSBpdHJ1ZWRpdgoKZGVmIGl4b3IoYSwgYik6CiAgICAiU2FtZSBhcyBhIF49IGIuIgogICAgYSBePSBiCiAgICByZXR1cm4gYQpfX2l4b3JfXyA9IGl4b3IKCmRlZiBsZW5ndGhfaGludChvYmosIGRlZmF1bHQ9MCk6CiAgICAiIiIKICAgIFJldHVybiBhbiBlc3RpbWF0ZSBvZiB0aGUgbnVtYmVyIG9mIGl0ZW1zIGluIG9iai4KICAgIFRoaXMgaXMgdXNlZnVsIGZvciBwcmVzaXppbmcgY29udGFpbmVycyB3aGVuIGJ1aWxkaW5nIGZyb20gYW4gaXRlcmFibGUuCgogICAgSWYgdGhlIG9iamVjdCBzdXBwb3J0cyBsZW4oKSwgdGhlIHJlc3VsdCB3aWxsIGJlIGV4YWN0LiBPdGhlcndpc2UsIGl0IG1heQogICAgb3Zlci0gb3IgdW5kZXItZXN0aW1hdGUgYnkgYW4gYXJiaXRyYXJ5IGFtb3VudC4gVGhlIHJlc3VsdCB3aWxsIGJlIGFuCiAgICBpbnRlZ2VyID49IDAuCiAgICAiIiIKICAgIHRyeToKICAgICAgICByZXR1cm4gbGVuKG9iaikKICAgIGV4Y2VwdCBUeXBlRXJyb3I6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB2YWwgPSBvYmouX19sZW5ndGhfaGludF9fKCkKICAgICAgICAgICAgaWYgdmFsIGlzIE5vdEltcGxlbWVudGVkOgogICAgICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yCiAgICAgICAgZXhjZXB0IChBdHRyaWJ1dGVFcnJvciwgVHlwZUVycm9yKToKICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHQKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBub3QgdmFsID4gMDoKICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ2RlZmF1bHQgbXVzdCBiZSA+IDAnKQogICAgICAgICAgICByZXR1cm4gdmFsCgojdHJ5OgojICAgIGZyb20gX29wZXJhdG9yIGltcG9ydCAqCiMgICAgZnJvbSBfb3BlcmF0b3IgaW1wb3J0IF9fZG9jX18KI2V4Y2VwdCBJbXBvcnRFcnJvcjoKIyAgIHBhc3MK',
'/Lib/os.py':'aW1wb3J0IHJhbmRvbQoKbmFtZT0iYnJ5dGhvbiIKCiNhbHRzZXA9Tm9uZQojY3VyZGlyPSIuIgoKZGVmIGRldm51bGwoKToKICAgIE9TRXJyb3IoJ0Z1bmN0aW9uIGRldm51bGwgbm90IHN1cHBvcnRlZCcpCgojZXh0c2VwPScuJwoKZGVmIGdldGxvYWRhdmcoKToKICAgIE9TRXJyb3IoJ0Z1bmN0aW9uIGdldGxvYWRhdmcgbm90IHN1cHBvcnRlZCcpCgojbGluZXNlcD0iXG4iCiNwYXRoc2VwPSI7IgojcGFyZGlyPSIuLiIKI3NlcD0nLycKCmRlZiB1cmFuZG9tKGxlbmd0aCk6CiAgICBfYz1bXQogICAgZm9yIF9pIGluIHJhbmdlKGxlbmd0aCk6CiAgICAgICAgX2MuYXBwZW5kKGNocihyYW5kb20ucmFuZGludCgwLDI1NSkpKQogICAgICAgIAogICAgcmV0dXJuICcnLmpvaW4oX2MpCgojaW1wb3J0IHBvc2l4cGF0aCBhcyBwYXRoCiNzeXMubW9kdWxlc1snb3MucGF0aCddID0gcGF0aAoKI2Zyb20gb3MucGF0aCBpbXBvcnQgKGN1cmRpciwgcGFyZGlyLCBzZXAsIHBhdGhzZXAsIGRlZnBhdGgsIGV4dHNlcCwgYWx0c2VwKQoKIyBQeXRob24gdXNlcyBmaXhlZCB2YWx1ZXMgZm9yIHRoZSBTRUVLXyBjb25zdGFudHM7IHRoZXkgYXJlIG1hcHBlZAojIHRvIG5hdGl2ZSBjb25zdGFudHMgaWYgbmVjZXNzYXJ5IGluIHBvc2l4bW9kdWxlLmMKU0VFS19TRVQgPSAwClNFRUtfQ1VSID0gMQpTRUVLX0VORCA9IDIKCmRlZiB3YWxrKHRvcCwgdG9wZG93bj1UcnVlLCBvbmVycm9yPU5vbmUsIGZvbGxvd2xpbmtzPUZhbHNlKToKICAgICNyZWNlaXZlIHNjb3BlIGVycm9yIGluIGJyeXRob24KICAgICMgd2h5IGhhdmUgb3Mud2FsayBpbiBicnl0aG9uPyAgc2VydmVyIHNpZGUgamF2YXNjcmlwdCAobm9kZWpzKQogICAgIyBpbW1lZGlhdGVseSBjYW4gdXNlIG9zLndhbGsgdG8gY29tcGlsZSBsaWJzIGFuZCBMaWIgbW9kdWxlcwogICAgIyB0byBqYXZhc2NyaXB0IGVxdWl2YWxlbnQuLgogICAgT1NFcnJvcignRnVuY3Rpb24gb3Mud2FsayBub3Qgc3VwcG9ydGVkIHlldCcpCiAgICByZXR1cm4KCiAgICAiIiJEaXJlY3RvcnkgdHJlZSBnZW5lcmF0b3IuCgogICAgRm9yIGVhY2ggZGlyZWN0b3J5IGluIHRoZSBkaXJlY3RvcnkgdHJlZSByb290ZWQgYXQgdG9wIChpbmNsdWRpbmcgdG9wCiAgICBpdHNlbGYsIGJ1dCBleGNsdWRpbmcgJy4nIGFuZCAnLi4nKSwgeWllbGRzIGEgMy10dXBsZQoKICAgICAgICBkaXJwYXRoLCBkaXJuYW1lcywgZmlsZW5hbWVzCgogICAgZGlycGF0aCBpcyBhIHN0cmluZywgdGhlIHBhdGggdG8gdGhlIGRpcmVjdG9yeS4gIGRpcm5hbWVzIGlzIGEgbGlzdCBvZgogICAgdGhlIG5hbWVzIG9mIHRoZSBzdWJkaXJlY3RvcmllcyBpbiBkaXJwYXRoIChleGNsdWRpbmcgJy4nIGFuZCAnLi4nKS4KICAgIGZpbGVuYW1lcyBpcyBhIGxpc3Qgb2YgdGhlIG5hbWVzIG9mIHRoZSBub24tZGlyZWN0b3J5IGZpbGVzIGluIGRpcnBhdGguCiAgICBOb3RlIHRoYXQgdGhlIG5hbWVzIGluIHRoZSBsaXN0cyBhcmUganVzdCBuYW1lcywgd2l0aCBubyBwYXRoIGNvbXBvbmVudHMuCiAgICBUbyBnZXQgYSBmdWxsIHBhdGggKHdoaWNoIGJlZ2lucyB3aXRoIHRvcCkgdG8gYSBmaWxlIG9yIGRpcmVjdG9yeSBpbgogICAgZGlycGF0aCwgZG8gb3MucGF0aC5qb2luKGRpcnBhdGgsIG5hbWUpLgoKICAgIElmIG9wdGlvbmFsIGFyZyAndG9wZG93bicgaXMgdHJ1ZSBvciBub3Qgc3BlY2lmaWVkLCB0aGUgdHJpcGxlIGZvciBhCiAgICBkaXJlY3RvcnkgaXMgZ2VuZXJhdGVkIGJlZm9yZSB0aGUgdHJpcGxlcyBmb3IgYW55IG9mIGl0cyBzdWJkaXJlY3RvcmllcwogICAgKGRpcmVjdG9yaWVzIGFyZSBnZW5lcmF0ZWQgdG9wIGRvd24pLiAgSWYgdG9wZG93biBpcyBmYWxzZSwgdGhlIHRyaXBsZQogICAgZm9yIGEgZGlyZWN0b3J5IGlzIGdlbmVyYXRlZCBhZnRlciB0aGUgdHJpcGxlcyBmb3IgYWxsIG9mIGl0cwogICAgc3ViZGlyZWN0b3JpZXMgKGRpcmVjdG9yaWVzIGFyZSBnZW5lcmF0ZWQgYm90dG9tIHVwKS4KCiAgICBXaGVuIHRvcGRvd24gaXMgdHJ1ZSwgdGhlIGNhbGxlciBjYW4gbW9kaWZ5IHRoZSBkaXJuYW1lcyBsaXN0IGluLXBsYWNlCiAgICAoZS5nLiwgdmlhIGRlbCBvciBzbGljZSBhc3NpZ25tZW50KSwgYW5kIHdhbGsgd2lsbCBvbmx5IHJlY3Vyc2UgaW50byB0aGUKICAgIHN1YmRpcmVjdG9yaWVzIHdob3NlIG5hbWVzIHJlbWFpbiBpbiBkaXJuYW1lczsgdGhpcyBjYW4gYmUgdXNlZCB0byBwcnVuZQogICAgdGhlIHNlYXJjaCwgb3IgdG8gaW1wb3NlIGEgc3BlY2lmaWMgb3JkZXIgb2YgdmlzaXRpbmcuICBNb2RpZnlpbmcKICAgIGRpcm5hbWVzIHdoZW4gdG9wZG93biBpcyBmYWxzZSBpcyBpbmVmZmVjdGl2ZSwgc2luY2UgdGhlIGRpcmVjdG9yaWVzIGluCiAgICBkaXJuYW1lcyBoYXZlIGFscmVhZHkgYmVlbiBnZW5lcmF0ZWQgYnkgdGhlIHRpbWUgZGlybmFtZXMgaXRzZWxmIGlzCiAgICBnZW5lcmF0ZWQuCgogICAgQnkgZGVmYXVsdCBlcnJvcnMgZnJvbSB0aGUgb3MubGlzdGRpcigpIGNhbGwgYXJlIGlnbm9yZWQuICBJZgogICAgb3B0aW9uYWwgYXJnICdvbmVycm9yJyBpcyBzcGVjaWZpZWQsIGl0IHNob3VsZCBiZSBhIGZ1bmN0aW9uOyBpdAogICAgd2lsbCBiZSBjYWxsZWQgd2l0aCBvbmUgYXJndW1lbnQsIGFuIG9zLmVycm9yIGluc3RhbmNlLiAgSXQgY2FuCiAgICByZXBvcnQgdGhlIGVycm9yIHRvIGNvbnRpbnVlIHdpdGggdGhlIHdhbGssIG9yIHJhaXNlIHRoZSBleGNlcHRpb24KICAgIHRvIGFib3J0IHRoZSB3YWxrLiAgTm90ZSB0aGF0IHRoZSBmaWxlbmFtZSBpcyBhdmFpbGFibGUgYXMgdGhlCiAgICBmaWxlbmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGV4Y2VwdGlvbiBvYmplY3QuCgogICAgQnkgZGVmYXVsdCwgb3Mud2FsayBkb2VzIG5vdCBmb2xsb3cgc3ltYm9saWMgbGlua3MgdG8gc3ViZGlyZWN0b3JpZXMgb24KICAgIHN5c3RlbXMgdGhhdCBzdXBwb3J0IHRoZW0uICBJbiBvcmRlciB0byBnZXQgdGhpcyBmdW5jdGlvbmFsaXR5LCBzZXQgdGhlCiAgICBvcHRpb25hbCBhcmd1bWVudCAnZm9sbG93bGlua3MnIHRvIHRydWUuCgogICAgQ2F1dGlvbjogIGlmIHlvdSBwYXNzIGEgcmVsYXRpdmUgcGF0aG5hbWUgZm9yIHRvcCwgZG9uJ3QgY2hhbmdlIHRoZQogICAgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBiZXR3ZWVuIHJlc3VtcHRpb25zIG9mIHdhbGsuICB3YWxrIG5ldmVyCiAgICBjaGFuZ2VzIHRoZSBjdXJyZW50IGRpcmVjdG9yeSwgYW5kIGFzc3VtZXMgdGhhdCB0aGUgY2xpZW50IGRvZXNuJ3QKICAgIGVpdGhlci4KCiAgICBFeGFtcGxlOgoKICAgIGltcG9ydCBvcwogICAgZnJvbSBvcy5wYXRoIGltcG9ydCBqb2luLCBnZXRzaXplCiAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2FsaygncHl0aG9uL0xpYi9lbWFpbCcpOgogICAgICAgIHByaW50KHJvb3QsICJjb25zdW1lcyIsIGVuZD0iIikKICAgICAgICBwcmludChzdW0oW2dldHNpemUoam9pbihyb290LCBuYW1lKSkgZm9yIG5hbWUgaW4gZmlsZXNdKSwgZW5kPSIiKQogICAgICAgIHByaW50KCJieXRlcyBpbiIsIGxlbihmaWxlcyksICJub24tZGlyZWN0b3J5IGZpbGVzIikKICAgICAgICBpZiAnQ1ZTJyBpbiBkaXJzOgogICAgICAgICAgICBkaXJzLnJlbW92ZSgnQ1ZTJykgICMgZG9uJ3QgdmlzaXQgQ1ZTIGRpcmVjdG9yaWVzCiAgICAiIiIKICAgICIiIgogICAgCiAgICBpc2xpbmssIGpvaW4sIGlzZGlyID0gcGF0aC5pc2xpbmssIHBhdGguam9pbiwgcGF0aC5pc2RpcgoKICAgICMgV2UgbWF5IG5vdCBoYXZlIHJlYWQgcGVybWlzc2lvbiBmb3IgdG9wLCBpbiB3aGljaCBjYXNlIHdlIGNhbid0CiAgICAjIGdldCBhIGxpc3Qgb2YgdGhlIGZpbGVzIHRoZSBkaXJlY3RvcnkgY29udGFpbnMuICBvcy53YWxrCiAgICAjIGFsd2F5cyBzdXBwcmVzc2VkIHRoZSBleGNlcHRpb24gdGhlbiwgcmF0aGVyIHRoYW4gYmxvdyB1cCBmb3IgYQogICAgIyBtaW5vciByZWFzb24gd2hlbiAoc2F5KSBhIHRob3VzYW5kIHJlYWRhYmxlIGRpcmVjdG9yaWVzIGFyZSBzdGlsbAogICAgIyBsZWZ0IHRvIHZpc2l0LiAgVGhhdCBsb2dpYyBpcyBjb3BpZWQgaGVyZS4KICAgIHRyeToKICAgICAgICAjIE5vdGUgdGhhdCBsaXN0ZGlyIGFuZCBlcnJvciBhcmUgZ2xvYmFscyBpbiB0aGlzIG1vZHVsZSBkdWUKICAgICAgICAjIHRvIGVhcmxpZXIgaW1wb3J0LSouCiAgICAgICAgbmFtZXMgPSBsaXN0ZGlyKHRvcCkKICAgIGV4Y2VwdCBlcnJvciBhcyBlcnI6CiAgICAgICAgaWYgb25lcnJvciBpcyBub3QgTm9uZToKICAgICAgICAgICAgb25lcnJvcihlcnIpCiAgICAgICAgcmV0dXJuCiAgICAKICAgIGRpcnMsIG5vbmRpcnMgPSBbXSwgW10KICAgIGZvciBuYW1lIGluIG5hbWVzOgogICAgICAgIGlmIGlzZGlyKGpvaW4odG9wLCBuYW1lKSk6CiAgICAgICAgICAgIGRpcnMuYXBwZW5kKG5hbWUpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbm9uZGlycy5hcHBlbmQobmFtZSkKICAgIAogICAgaWYgdG9wZG93bjoKICAgICAgICB5aWVsZCB0b3AsIGRpcnMsIG5vbmRpcnMKICAgIAogICAgZm9yIG5hbWUgaW4gZGlyczoKICAgICAgICBuZXdfcGF0aCA9IGpvaW4odG9wLCBuYW1lKQogICAgICAgIGlmIGZvbGxvd2xpbmtzIG9yIG5vdCBpc2xpbmsobmV3X3BhdGgpOgogICAgICAgICAgICBmb3IgeCBpbiB3YWxrKG5ld19wYXRoLCB0b3Bkb3duLCBvbmVycm9yLCBmb2xsb3dsaW5rcyk6CiAgICAgICAgICAgICAgICB5aWVsZCB4CiAgICBpZiBub3QgdG9wZG93bjoKICAgICAgICB5aWVsZCB0b3AsIGRpcnMsIG5vbmRpcnMKICAgICIiIgo=',
'/Lib/pydom.py':'',
'/Lib/pyindexedDB.py':'Y2xhc3MgRXZlbnRMaXN0ZW5lcjoKICBkZWYgX19pbml0X18oc2VsZiwgZXZlbnRzPVtdKToKICAgICAgc2VsZi5fZXZlbnRzPWV2ZW50cwoKICBkZWYgYXBwZW5kKHNlbGYsIGV2ZW50KToKICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZChldmVudCkKCiAgZGVmIGZpcmUoc2VsZiwgZSk6CiAgICAgIGZvciBfZXZlbnQgaW4gc2VsZi5fZXZlbnRzOgogICAgICAgICAgX2V2ZW50KGUpCgpjbGFzcyBweWluZGV4ZWREQjoKICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgIGlmIG5vdCBfX0JSWVRIT05fXy5oYXNfaW5kZXhlZERCOgogICAgICAgICByYWlzZSBFeGNlcHRpb24oIk5vdEltcGxlbWVudGVkRXJyb3IiLCAiWW91ciBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBpbmRleGVkREIiKQogICAgICAgICByZXR1cm4KCiAgICAgIHNlbGYuX2luZGV4ZWREQj1fX0JSWVRIT05fXy5pbmRleGVkREIoKQogICAgICBzZWxmLl9kYj1Ob25lCiAgICAgIHNlbGYuX3ZlcnNpb249Tm9uZQoKICBkZWYgX29uc3VjY2VzcyhzZWxmLCBldmVudCk6CiAgICAgIHNlbGYuX2RiPWV2ZW50LnRhcmdldC5yZXN1bHQKCiAgZGVmIG9wZW4oc2VsZiwgbmFtZSwgb25zdWNjZXNzLCB2ZXJzaW9uPTEuMCwgb25lcnJvcj1Ob25lLCAKICAgICAgICAgICBvbnVwZ3JhZGVuZWVkZWQ9Tm9uZSk6CiAgICAgIHNlbGYuX3ZlcnNpb249dmVyc2lvbgogICAgICBfcmVzdWx0PXNlbGYuX2luZGV4ZWREQi5vcGVuKG5hbWUsIHZlcnNpb24pCgogICAgICBfb25zdWNjZXNzPUV2ZW50TGlzdGVuZXIoW3NlbGYuX29uc3VjY2Vzcywgb25zdWNjZXNzXSkKICAgICAgX3Jlc3VsdC5vbnN1Y2Nlc3M9X29uc3VjY2Vzcy5maXJlCiAgICAgIF9yZXN1bHQub251cGdyYWRlbmVlZGVkPW9udXBncmFkZW5lZWRlZAoKICAgICAgaWYgb25lcnJvciBpcyBOb25lOgogICAgICAgICBkZWYgb25lcnJvcihlKToKICAgICAgICAgICAgIHByaW50KCIlczolcyIgJSAgKGUudHlwZSwgZS5yZXN1bHQpKQoKICAgICAgX3Jlc3VsdC5vbmVycm9yPW9uZXJyb3IKICAgICAgX3Jlc3VsdC5vbmJsb2NrZWQ9b25lcnJvcgoKICBkZWYgdHJhbnNhY3Rpb24oc2VsZiwgZW50aXRpZXMsIG1vZGU9J3JlYWQnKToKICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uKHNlbGYuX2RiLnRyYW5zYWN0aW9uKGVudGl0aWVzLCBtb2RlKSkKCmNsYXNzIFRyYW5zYWN0aW9uOgogIGRlZiBfX2luaXRfXyhzZWxmLCB0cmFuc2FjdGlvbik6CiAgICAgIHNlbGYuX3RyYW5zYWN0aW9uPXRyYW5zYWN0aW9uCgogIGRlZiBvYmplY3RTdG9yZShzZWxmLCBuYW1lKToKICAgICAgcmV0dXJuIE9iamVjdFN0b3JlKHNlbGYuX3RyYW5zYWN0aW9uLm9iamVjdFN0b3JlKG5hbWUpKQoKY2xhc3MgT2JqZWN0U3RvcmU6CiAgZGVmIF9faW5pdF9fKHNlbGYsIG9iamVjdFN0b3JlKToKICAgICAgc2VsZi5fb2JqZWN0U3RvcmU9b2JqZWN0U3RvcmUKICAgICAgc2VsZi5fZGF0YT1bXQoKICBkZWYgY2xlYXIoc2VsZiwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIF9yZXN1bHQ9c2VsZi5fb2JqZWN0U3RvcmUuY2xlYXIoKQoKICAgICAgaWYgb25zdWNjZXNzIGlzIG5vdCBOb25lOgogICAgICAgICBfcmVzdWx0Lm9uc3VjY2Vzcz1vbnN1Y2Nlc3MKCiAgICAgIGlmIG9uZXJyb3IgaXMgbm90IE5vbmU6CiAgICAgICAgIF9yZXN1bHQub25lcnJvcj1vbmVycm9yCgogIGRlZiBfaGVscGVyKHNlbGYsIGZ1bmMsIG9iamVjdCwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIF9yZXN1bHQ9ZnVuYyhvYmplY3QpCgogICAgICBpZiBvbnN1Y2Nlc3MgaXMgbm90IE5vbmU6CiAgICAgICAgIF9yZXN1bHQub25zdWNjZXNzPW9uc3VjY2VzcwoKICAgICAgaWYgb25lcnJvciBpcyBub3QgTm9uZToKICAgICAgICAgX3Jlc3VsdC5vbmVycm9yPW9uZXJyb3IKCiAgZGVmIHB1dChzZWxmLCBvYmplY3QsIGtleT1Ob25lLCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgX3I9c2VsZi5fb2JqZWN0U3RvcmUucHV0KG9iamVjdCwga2V5KQogICAgICBfci5vbnN1Y2Nlc3M9b25zdWNjZXNzCiAgICAgIF9yLm9uZXJyb3I9b25lcnJvcgoKICBkZWYgYWRkKHNlbGYsIG9iamVjdCwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIHNlbGYuX2hlbHBlcihzZWxmLl9vYmplY3RTdG9yZS5hZGQsIG9iamVjdCwgb25zdWNjZXNzLCBvbmVycm9yKQoKICBkZWYgZGVsZXRlKHNlbGYsIGluZGV4LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKTogCiAgICAgIHNlbGYuX2hlbHBlcihzZWxmLl9vYmplY3RTdG9yZS5kZWxldGUsIGluZGV4LCBvbnN1Y2Nlc3MsIG9uZXJyb3IpCiAgICAgCiAgZGVmIHF1ZXJ5KHNlbGYsICphcmdzKToKICAgICAgc2VsZi5fZGF0YT1bXQogICAgICBkZWYgb25zdWNjZXNzKGV2ZW50KToKICAgICAgICAgIGN1cnNvcj1ldmVudC50YXJnZXQucmVzdWx0CiAgICAgICAgICBpZiBjdXJzb3IgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICBzZWxmLl9kYXRhLmFwcGVuZChjdXJzb3IudmFsdWUpCiAgICAgICAgICAgICBjdXJzb3IuY29udGludWUoKQoKICAgICAgc2VsZi5fb2JqZWN0U3RvcmUub3BlbkN1cnNvcihhcmdzKS5vbnN1Y2Nlc3M9b25zdWNjZXNzCgogIGRlZiBmZXRjaGFsbChzZWxmKToKICAgICAgeWllbGQgc2VsZi5fZGF0YQoKICBkZWYgZ2V0KHNlbGYsIGtleSwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIHNlbGYuX2hlbHBlcihzZWxmLl9vYmplY3RTdG9yZS5nZXQsIGtleSwgb25zdWNjZXNzLCBvbmVycm9yKQo=',
'/Lib/string.py':'IyBTb21lIHN0cmluZ3MgZm9yIGN0eXBlLXN0eWxlIGNoYXJhY3RlciBjbGFzc2lmaWNhdGlvbgp3aGl0ZXNwYWNlID0gJyBcdFxuXHJcdlxmJwphc2NpaV9sb3dlcmNhc2UgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonCmFzY2lpX3VwcGVyY2FzZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicKYXNjaWlfbGV0dGVycyA9IGFzY2lpX2xvd2VyY2FzZSArIGFzY2lpX3VwcGVyY2FzZQpkaWdpdHMgPSAnMDEyMzQ1Njc4OScKaGV4ZGlnaXRzID0gZGlnaXRzICsgJ2FiY2RlZicgKyAnQUJDREVGJwpvY3RkaWdpdHMgPSAnMDEyMzQ1NjcnCnB1bmN0dWF0aW9uID0gIiIiISIjJCUmJygpKissLS4vOjs8PT4/QFtcXV5fYHt8fX4iIiIKcHJpbnRhYmxlID0gZGlnaXRzICsgYXNjaWlfbGV0dGVycyArIHB1bmN0dWF0aW9uICsgd2hpdGVzcGFjZQoKIyBGdW5jdGlvbnMgd2hpY2ggYXJlbid0IGF2YWlsYWJsZSBhcyBzdHJpbmcgbWV0aG9kcy4KCiMgQ2FwaXRhbGl6ZSB0aGUgd29yZHMgaW4gYSBzdHJpbmcsIGUuZy4gIiBhQmMgIGRFZiAiIC0+ICJBYmMgRGVmIi4KZGVmIGNhcHdvcmRzKHMsIHNlcD1Ob25lKToKICAgICIiImNhcHdvcmRzKHMgWyxzZXBdKSAtPiBzdHJpbmcKCiAgICBTcGxpdCB0aGUgYXJndW1lbnQgaW50byB3b3JkcyB1c2luZyBzcGxpdCwgY2FwaXRhbGl6ZSBlYWNoCiAgICB3b3JkIHVzaW5nIGNhcGl0YWxpemUsIGFuZCBqb2luIHRoZSBjYXBpdGFsaXplZCB3b3JkcyB1c2luZwogICAgam9pbi4gIElmIHRoZSBvcHRpb25hbCBzZWNvbmQgYXJndW1lbnQgc2VwIGlzIGFic2VudCBvciBOb25lLAogICAgcnVucyBvZiB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMgYXJlIHJlcGxhY2VkIGJ5IGEgc2luZ2xlIHNwYWNlCiAgICBhbmQgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBhcmUgcmVtb3ZlZCwgb3RoZXJ3aXNlCiAgICBzZXAgaXMgdXNlZCB0byBzcGxpdCBhbmQgam9pbiB0aGUgd29yZHMuCgogICAgIiIiCiAgICByZXR1cm4gKHNlcCBvciAnICcpLmpvaW4oeC5jYXBpdGFsaXplKCkgZm9yIHggaW4gcy5zcGxpdChzZXApKQo=',
'/Lib/sys.py':'X19zdGRvdXRfXz1nZXRhdHRyKGRvYywiJHN0ZG91dCIpCl9fc3RkZXJyX189Z2V0YXR0cihkb2MsIiRzdGRlcnIiKQoKc3Rkb3V0ID0gZ2V0YXR0cihkb2MsIiRzdGRvdXQiKQpzdGRlcnIgPSBnZXRhdHRyKGRvYywiJHN0ZGVyciIpCgptb2R1bGVzPV9fQlJZVEhPTl9fLm1vZHVsZXMKCmhhc19sb2NhbF9zdG9yYWdlPV9fQlJZVEhPTl9fLmhhc19sb2NhbF9zdG9yYWdlCmhhc19qc29uPV9fQlJZVEhPTl9fLmhhc19qc29uCnZlcnNpb25faW5mbz1fX0JSWVRIT05fXy52ZXJzaW9uX2luZm8KcGF0aD1fX0JSWVRIT05fXy5wYXRoCmJ1aWx0aW5fbW9kdWxlX25hbWVzPVsncG9zaXgnXQoKYnl0ZW9yZGVyPSdsaXR0bGUnCm1heHNpemU9OTAwNzE5OTI1NDc0MDk5MiAgICNsYXJnZXN0IGludGVnZXIuLgoKcGxhdGZvcm09ImJyeXRob24iCndhcm5vcHRpb25zPVtdCgpjbGFzcyBmbGFnX2NsYXNzOgogIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgc2VsZi5kZWJ1Zz0wCiAgICAgIHNlbGYuaW5zcGVjdD0wCiAgICAgIHNlbGYuaW50ZXJhY3RpdmU9MAogICAgICBzZWxmLm9wdGltaXplPTAKICAgICAgc2VsZi5kb250X3dyaXRlX2J5dGVjb2RlPTAKICAgICAgc2VsZi5ub191c2VyX3NpdGU9MAogICAgICBzZWxmLm5vX3NpdGU9MAogICAgICBzZWxmLmlnbm9yZV9lbnZpcm9ubWVudD0wCiAgICAgIHNlbGYudmVyYm9zZT0wCiAgICAgIHNlbGYuYnl0ZXNfd2FybmluZz0wCiAgICAgIHNlbGYucXVpZXQ9MAogICAgICBzZWxmLmhhc2hfcmFuZG9taXphdGlvbj0xCgpmbGFncz1mbGFnX2NsYXNzKCkKCg==',
'/Lib/traceback.py':'aW1wb3J0IHN5cwpkZWYgcHJpbnRfZXhjKGZpbGU9c3lzLnN0ZGVycik6CiAgICBleGMgPSBfX0JSWVRIT05fXy5leGNlcHRpb25fc3RhY2tbLTFdCiAgICBmaWxlLndyaXRlKGV4Yy5fX25hbWVfXykKICAgIGlmIGV4Yy5tZXNzYWdlOgogICAgICAgIGZpbGUud3JpdGUoJzogJytleGMubWVzc2FnZSkKICAgIGZpbGUud3JpdGUoZXhjLmluZm8pCiAgICBmaWxlLndyaXRlKCdcbicpCg==',
'/Lib/_collections.py':''
}


function readFromVFS(lib){
   //borrowed code from http://stackoverflow.com/questions/1119722/base-62-conversion-in-python
   if (window.atob === undefined) {
      // browser is not chrome, firefox or safari :(
      window.atob=function(s) {
        var e={},i,k,v=[],r='',w=String.fromCharCode;
        var n=[[65,91],[97,123],[48,58],[43,44],[47,48]];

        for(z in n){for(i=n[z][0];i<n[z][1];i++){v.push(w(i));}}
        for(i=0;i<64;i++){e[v[i]]=i;}

        for(i=0;i<s.length;i+=72){
           var b=0,c,x,l=0,o=s.substring(i,i+72);
           for(x=0;x<o.length;x++){
              c=e[o.charAt(x)];b=(b<<6)+c;l+=6;
              while(l>=8){r+=w((b>>>(l-=8))%256);}
           }
        }
        return r;
      }
   }

   if (__BRYTHON__.$py_VFS[lib] === undefined) return undefined
   //retrieve module from virutal file system and return contents
   return window.atob(__BRYTHON__.$py_VFS[lib])
}

//define import procedure to look up module in VFS
$import_via_VFS=function(module,alias,names){
  var ext=['.js', '.py']
  var search_path=__BRYTHON__.path
  var root = __BRYTHON__.brython_path;
  if (root.endswith('/')) {
     root=root.substring(0,root.length-1); 
  }
  if (search_path.indexOf(root+'/libs') == -1) {
     search_path.unshift(root+'/libs')
  }

  if (search_path.indexOf(root+'/Lib') == -1) {
     search_path.unshift(root+'/Lib')
  }

  for(var i=0; i<search_path.length; i++) {
     for (var j=0; j<ext.length; j++) {
         var path=search_path[i].replace(root, '')
         path+='/'+module+ext[j]
         
         //console.log("searching for " + path + " in VFS");
         var module_contents=readFromVFS(path)
         if(module_contents !== undefined) {
           console.log("imported ("+module+") via VFS:" + path)
           if (ext[j] == '.js') {
              return $import_js_module(module,alias,names,path,module_contents)
           }
           return $import_py_module(module,alias,names,path,module_contents)
         }
     }
  }
  res = Error()
  res.name = 'NotFoundError'
  res.message = "No module named '"+module+"'"
  throw res
}
$import_funcs.unshift($import_via_VFS)
